<?xml version="1.0" encoding="UTF-8"?>
<schema xmlns="http://purl.oclc.org/dsdl/schematron" queryBinding="xslt2">
   <title>ISO Schematron rules</title>
   <!-- This file generated 2025-03-18T07:58:25Z by 'extract-isosch.xsl'. -->
   <!-- ********************* -->
   <!-- namespaces, declared: -->
   <!-- ********************* -->
   <ns prefix="tei" uri="http://www.tei-c.org/ns/1.0"/>
   <ns prefix="xs" uri="http://www.w3.org/2001/XMLSchema"/>
   <ns prefix="rng" uri="http://relaxng.org/ns/structure/1.0"/>
   <ns prefix="rna" uri="http://relaxng.org/ns/compatibility/annotations/1.0"/>
   <ns prefix="sch" uri="http://purl.oclc.org/dsdl/schematron"/>
   <ns prefix="sch1x" uri="http://www.ascc.net/xml/schematron"/>
   <ns prefix="mei" uri="http://www.music-encoding.org/ns/mei"/>
   <ns prefix="teix" uri="http://www.tei-c.org/ns/Examples"/>
   <!-- ******************************************************** -->
   <!-- constraints in en, und, mul, zxx, of which there are 130 -->
   <!-- ******************************************************** -->
   <pattern id="schematron-constraint-hyphenation-whitespace-1">
      <rule context="tei:*[@break]">
         <report test="matches((following-sibling::text() | following-sibling::element())[1], '^\s') or matches((preceding-sibling::text() | preceding-sibling::element())[last()], '\s$')">There must not be any whitespace before or after the <name/> element when the @break attribute is applied.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-att-datable-w3c-when-2">
      <rule context="tei:*[@when]">
         <report test="@notBefore|@notAfter|@from|@to" role="nonfatal">The @when attribute cannot be used with any other att.datable.w3c attributes.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-att-datable-w3c-from-3">
      <rule context="tei:*[@from]">
         <report test="@notBefore" role="nonfatal">The @from and @notBefore attributes cannot be used together.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-att-datable-w3c-to-4">
      <rule context="tei:*[@to]">
         <report test="@notAfter" role="nonfatal">The @to and @notAfter attributes cannot be used together.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-enforce-decls-on-every-child-5">
      <rule context="tei:*[*/@decls]">
         <assert test="every $i in (* except tei:head|tei:pb|tei:cb|tei:lb) satisfies $i[@decls]">Every child element (except headings or milestone elements) should also bear the decls attribute.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-report-single-decls-6">
      <rule context="tei:*[*/@decls]">
         <report test="count(*[@decls]) eq 1">The decls attribute must be applied to at least two elements.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-only_1_ODD_source-7">
      <rule context="tei:*[@source]">
         <let name="srcs" value="tokenize( normalize-space(@source),' ')"/>
         <report test="( self::tei:classRef                                     | self::tei:dataRef                                     | self::tei:elementRef                                     | self::tei:macroRef                                     | self::tei:moduleRef                                     | self::tei:schemaSpec )                                     and                                     $srcs[2]"> When used on a schema description element (like <value-of select="name(.)"/>), the @source attribute should have only 1 value. (This one has <value-of select="count($srcs)"/>.)</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-targetLang-8">
      <rule context="tei:*[not(self::tei:schemaSpec)][@targetLang]">
         <assert test="@target">@targetLang should only be used on <name/> if @target is specified.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-spanTo-points-to-following-9">
      <rule context="tei:*[ starts-with( @spanTo, '#') ]">
         <assert test="id( substring( @spanTo, 2 ) ) &gt;&gt; ."> The element indicated by @spanTo (<value-of select="@spanTo"/>) must follow the current <name/> element</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-subtypeTyped-10">
      <rule context="tei:*[@subtype]">
         <assert test="@type">The <name/> element should not be categorized in detail with @subtype unless also categorized in general with @type</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hand-reference-11">
      <rule context="tei:*[@hand]">
         <assert test="id(substring(@hand,2)) or starts-with(@hand, 'wega:')">There must be an element with the xml:id = "<value-of select="substring(@hand,2)"/>" which is the target of this @hand.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-calendar_attr_on_empty_element-12">
      <rule context="tei:*[@calendar]">
         <assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more systems or calendars to which the date represented by the content of this element belongs, but this <name/> element has no textual content.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-extent-within-physDesc-13">
      <rule context="tei:p">
         <report test="@n='extent' and not(parent::tei:physDesc)"> The value 'extent' must only be used within the tei:physDesc.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-extent-only-once-14">
      <rule context="tei:physDesc">
         <report test="count(tei:p[@n='extent']) gt 1">There must only be one tei:p with @n='extent'</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-extent-regex-15">
      <rule context="tei:p[@n='extent']">
         <assert test="matches(., '^\d+ D?Bl\. \(\d+ b\. S\.( (o|einschl)\. Adr\.)?( u\. Umschlag)?\)$')">The 'extent' must match the pattern '^\d+ D?Bl\. \(\d+ b\. S\.( (o|einschl)\. Adr\.)?( u\. Umschlag)?\)$'</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-abstractModel-structure-p-in-ab-or-p-16">
      <rule context="tei:p">
         <report test="(ancestor::tei:p or ancestor::tei:ab)                              and not(parent::tei:exemplum                             |parent::tei:item                             |parent::tei:note                             |parent::tei:q                             |parent::tei:quote                             |parent::tei:remarks                             |parent::tei:said                             |parent::tei:sp                             |parent::tei:stage                             |parent::tei:cell                             |parent::tei:figure                             |parent::tei:footNote)"> Abstract model violation: Paragraphs may not contain other paragraphs or ab elements.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-abstractModel-structure-l-17">
      <rule context="tei:p">
         <report test="(ancestor::tei:l or ancestor::tei:lg)                              and not(parent::tei:figure or parent::tei:note or ancestor::tei:floatingText or parent::tei:footNote)"> Abstract model violation: Lines may not contain higher-level structural elements such as div, p, or ab, unless p is a child of figure or note, or is a descendant of floatingText.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-abstractModel-structure-p-in-l-18">
      <rule context="tei:l//tei:p">
         <assert test="ancestor::tei:floatingText | parent::tei:figure | parent::tei:note"> Abstract model violation: Metrical lines may not contain higher-level structural elements such as div, p, or ab, unless p is a child of figure or note, or is a descendant of floatingText.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-deprecationInfo-only-in-deprecated-19">
      <rule context="tei:desc[ @type eq 'deprecationInfo']">
         <assert test="../@validUntil">Information about a deprecation should only be present in a specification element that is being deprecated: that is, only an element that has a @validUntil attribute should have a child &lt;desc type="deprecationInfo"&gt;.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-empty-sic-20">
      <rule context="tei:sic">
         <report test="normalize-space(.) = ''">ein sic sollte immer Text enthalten. Alternativ kann ein supplied oder gap eingesetzt werden.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-gap-unit-quantity-21">
      <rule context="tei:gap">
         <report test="(@unit and not(@quantity)) or (@quantity and not(@unit))">@unit and @quantity must both be given!</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-rs-typeNkey-22">
      <rule context="tei:rs[@type='person'][@key]">
         <assert test="matches(@key, '^A00[0-9A-F]{4}$')">A type value of 'person' must have only one key, starting with 'A00'</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-rs-typeNkey-23">
      <rule context="tei:rs[@type='persons'][@key]">
         <assert test="matches(@key, '^(A00[0-9A-F]{4}\s)*A00[0-9A-F]{4}$')">A type value of 'persons' must have at least one key, each starting with 'A00'</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-rs-typeNkey-24">
      <rule context="tei:rs[@type='work'][@key]">
         <assert test="matches(@key, '^A02\d{4}$')">A type value of 'work' must have only one key, starting with 'A02'</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-rs-typeNkey-25">
      <rule context="tei:rs[@type='works'][@key]">
         <assert test="matches(@key, '^(A02\d{4}\s)*A02\d{4}$')">A type value of 'works' must have at least one key, each starting with 'A02'</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-rs-typeNkey-26">
      <rule context="tei:rs[@type='writing'][@key]">
         <assert test="matches(@key, '^A03\d{4}$')">A type value of 'writing' must have only one key, starting with 'A03'</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-rs-typeNkey-27">
      <rule context="tei:rs[@type='writings'][@key]">
         <assert test="matches(@key, '^(A03\d{4}\s)*A03\d{4}$')">A type value of 'writings' must have at least one key, each starting with 'A03'</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-rs-typeNkey-28">
      <rule context="tei:rs[@type='letter'][@key]">
         <assert test="matches(@key, '^A04\d{4}$')">A type value of 'letter' must have only one key, starting with 'A04'</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-rs-typeNkey-29">
      <rule context="tei:rs[@type='letters'][@key]">
         <assert test="matches(@key, '^(A04\d{4}\s)*A04\d{4}$')">A type value of 'letters' must have at least one key, each starting with 'A04'</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-rs-typeNkey-30">
      <rule context="tei:rs[@type='news'][@key]">
         <assert test="matches(@key, '^(A05\d{4}\s)*A05\d{4}$')">A type value of 'news' must have at least one key, starting with 'A05'</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-rs-typeNkey-31">
      <rule context="tei:rs[@type='diaryDay'][@key]">
         <assert test="matches(@key, '^A06\d{4}$')">A type value of 'diaryDay' must have only one key, starting with 'A06'</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-rs-typeNkey-32">
      <rule context="tei:rs[@type='diaryDays'][@key]">
         <assert test="matches(@key, '^(A06\d{4}\s)*A06\d{4}$')">A type value of 'diaryDays' must have at least one key, each starting with 'A06'</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-rs-typeNkey-33">
      <rule context="tei:rs[@type='org'][@key]">
         <assert test="matches(@key, '^A08\d{4}$')">A type value of 'org' must have only one key, starting with 'A08'</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-rs-typeNkey-34">
      <rule context="tei:rs[@type='orgs'][@key]">
         <assert test="matches(@key, '^(A08\d{4}\s)*A08\d{4}$')">A type value of 'orgs' must have at least one key, each starting with 'A08'</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-rs-typeNkey-35">
      <rule context="tei:rs[@type='document'][@key]">
         <assert test="matches(@key, '^A10\d{4}$')">A type value of 'document' must have only one key, starting with 'A10'</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-rs-typeNkey-36">
      <rule context="tei:rs[@type='documents'][@key]">
         <assert test="matches(@key, '^(A10\d{4}\s)*A10\d{4}$')">A type value of 'documents' must have at least one key, each starting with 'A10'</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-rs-typeNkey-37">
      <rule context="tei:rs[@type='biblio'][@key]">
         <assert test="matches(@key, '^(A11\d{4}\s)*A11\d{4}$')">A type value of 'biblio' must have at least one key, each starting with 'A11'</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-rs-typeNkey-38">
      <rule context="tei:rs[@type='addenda'][@key]">
         <assert test="matches(@key, '^A12\d{4}$')">A type value of 'addenda' must have only one key, starting with 'A12'</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-rs-typeNkey-39">
      <rule context="tei:rs[@type='place'][@key]">
         <assert test="matches(@key, '^A13\d{4}$')">A type value of 'place' must have only one key, starting with 'A13'</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-rs-typeNkey-40">
      <rule context="tei:rs[@type='places'][@key]">
         <assert test="matches(@key, '^(A13\d{4}\s)*A13\d{4}$')">A type value of 'places' must have at least one key, each starting with 'A13'</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-rs-typeNkey-41">
      <rule context="tei:rs[@type='mixed'][@key]">
         <assert test="count(distinct-values(for $i in tokenize(@key, '\s+') return substring($i, 1, 3))) gt 1">A type value of 'mixed' must have keys referring to different document types</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-address-placement-42">
      <rule context="tei:address">
         <report test="ancestor::tei:opener">Putting <name/> in the opener is most probably an error and should be put in a separate div of type=address</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-dateHeuristics2-43">
      <rule context="tei:date[@notBefore castable as xs:date and @notAfter castable as xs:date]">
         <report test="xs:date(@notBefore) gt xs:date(@notAfter)">the date value of notBefore is later than notAfter</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-dateHeuristics2-44">
      <rule context="tei:date[@notBefore castable as xs:gYear and @notAfter castable as xs:gYear]">
         <report test="xs:date(concat(@notBefore, '-01-01')) gt xs:date(concat(@notAfter, '-01-01'))">the date value of notBefore is later than notAfter</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-dateHeuristics2-45">
      <rule context="tei:date[@notBefore castable as xs:gYear and @notAfter castable as xs:date]">
         <report test="xs:date(concat(@notBefore, '-01-01')) gt xs:date(@notAfter)">the date value of notBefore is later than notAfter</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-dateHeuristics2-46">
      <rule context="tei:date[@notBefore castable as xs:date and @notAfter castable as xs:gYear]">
         <report test="xs:date(@notBefore) gt xs:date(concat(@notAfter, '-12-31'))">the date value of notBefore is later than notAfter</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-dateHeuristics3-47">
      <rule context="tei:date">
         <report test="(@from or @to) and (@when or @notAfter or @notBefore)">cooccurence of date and duration attributes</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-dateHeuristics4-48">
      <rule context="tei:date">
         <report test="@when and (@notAfter or @notBefore)">cooccurence of exact and uncertain date attributes</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-dateHeuristics5-49">
      <rule context="tei:date[ancestor::tei:teiHeader]">
         <assert test="@when or @notBefore or @notAfter or @from or @to or @cert='unknown' or .='o.J.' or .='o. J.'">tei:date benötigt ein Attribut @when, @notBefore o.ä.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-dateHeuristics6-50">
      <rule context="tei:date[some $i in (@when, @notBefore, @notAfter, @from, @to) satisfies $i castable as xs:date]">
         <report test="every $j in (@when, @notBefore, @notAfter, @from, @to)[. castable as xs:date] satisfies xs:date($j) gt current-date()">some attribute value of <name/> is greater than the current date</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-dateHeuristics6-51">
      <rule context="tei:date[some $i in (@when, @notBefore, @notAfter, @from, @to) satisfies $i castable as xs:gYear]">
         <report test="every $j in (@when, @notBefore, @notAfter, @from, @to)[. castable as xs:gYear] satisfies number($j) gt year-from-date(current-date())">some attribute value of <name/> is greater than the current date</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-julian-before-1582-52">
      <rule context="tei:date[@calendar='Julian']">
         <report test="some $i in (@when, @notBefore, @notAfter, @from, @to) satisfies $i lt '1582-10-15'">Before October 15, 1582 the default calendar is Julian so no extra calendar declaration is needed.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-ptr-target-53">
      <rule context="tei:ptr[not(starts-with(@target, 'http'))]">
         <assert test="following::tei:note[@xml:id=substring(current()/@target,2)]"> The note element indicated by @target (<value-of select="@target"/>) must follow the current element <name/>. Otherwise the target must be some external URL prefixed with 'http'.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-duplicate-ptr-54">
      <rule context="tei:ptr">
         <report test="following::tei:ptr[@target=current()/@target]"> There must be only one pointer with the @target (<value-of select="@target"/>)</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-ptrAtts-55">
      <rule context="tei:ptr">
         <report test="@target and @cRef">Only one of the attributes @target and @cRef may be supplied on <name/>.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-prev-next-correspContext-56">
      <rule context="tei:ref[not(parent::tei:correspContext)]">
         <report test="@type=('previousLetterFromAddressee', 'nextLetterFromAddressee')">'previousLetterFromAddressee' and 'nextLetterFromAddressee' are only used within the correspContext element.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-refAtts-57">
      <rule context="tei:ref">
         <report test="@target and @cRef">Only one of the attributes @target and @cRef may be supplied on <name/>.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-gloss-list-58">
      <rule context="tei:list">
         <report test="./tei:label and not(@type='gloss')">Labels are only allowed in lists of type='gloss'</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-gloss-list-must-have-labels-59">
      <rule context="tei:list[@type='gloss']">
         <assert test="tei:label">The content of a "gloss" list should include a sequence of one or more pairs of a label element followed by an item element</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-note-in-text-60">
      <rule context="tei:note[not(parent::tei:org or parent::tei:person or parent::tei:notesStmt or parent::tei:biblStruct or parent::tei:imprint or parent::tei:place)]">
         <assert test="@type and @resp and @xml:id">It is required to provide @type and @resp and @xml:id on note.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-thematicCom-target-61">
      <rule context="tei:note[@type='thematicCom' or @target]">
         <assert test="@type='thematicCom' and @target">You need to provide thematic commentary targets (Only @type='thematicCom' and @target go together!).</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-thematicCom-must-be-empty-62">
      <rule context="tei:note[@type='thematicCom' or @target]">
         <report test="normalize-space() ne''">Thematic commentaries must not contain any text.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-notesStmt-notes-63">
      <rule context="tei:note[parent::tei:notesStmt]">
         <assert test="@type=('editorial', 'summary', 'thematicCom', 'incipit', 'textConst')">Within the notesStmt only 'editorial', 'summary', 'textConst', or 'thematicCom' are allowed for @type on note.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-text-notes-64">
      <rule context="tei:note[not(parent::tei:notesStmt)]">
         <report test="@type=('editorial', 'summary', 'incipit')">The note types 'editorial', 'summary', or 'thematicCom' are not allowed within the text section but only in the notesStmt.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-structured-content-notes-65">
      <rule context="tei:note[parent::tei:notesStmt][tei:p|tei:list|tei:table]">
         <report test="text()[matches(., '\w')] or *[not(self::tei:p or self::tei:list or self::tei:table)]">There must be no mixed content when a tei:p, tei:list, or tei:table is present.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-initial-uppercase-commentaries-66">
      <rule context="tei:note[@type='commentary'][not(*[1]/self::tei:q or *[1]/self::tei:quote)]">
         <assert test="matches(replace(normalize-unicode(normalize-space(.), 'NFKD'),  '[\p{M}]', ''), '^[A-Z0-9]')">Commentary notes must start with an upper case letter.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-graphic-url-check-67">
      <rule context="tei:graphic[@url]">
         <assert test="matches(@url, '^[-_A-Za-z0-9\.]+$') or starts-with(@url, 'http') or starts-with(@url, 'wega:')">Found invalid (non-ASCII) characters for an internal URL in @url</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-url-or-sameAs-68">
      <rule context="tei:graphic">
         <assert test="(@url or @sameAs) and (count(@url|@sameAs) eq 1)">Exactly one @url or @sameAs attribute is mandatory</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-facs-reference-69">
      <rule context="tei:pb[@facs]">
         <assert test="id(substring(@facs,2)) or starts-with(@facs, 'wega:')">There must be an element with the xml:id = "<value-of select="substring(@facs,2)"/>" which is the target of this @facs.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-analyticTitle-70">
      <rule context="tei:analytic">
         <report test="tei:title/@level and not(tei:title/@level='a')">a title within analytic must have a @level='a'</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-monogrTitle-71">
      <rule context="tei:monogr">
         <report test="tei:title/@level and not(tei:title/@level=('j','m','u'))">a title within monogr must have a @level='j|m'</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-seriesTitle-72">
      <rule context="tei:series">
         <report test="tei:title/@level and not(tei:title/@level='s')">a title within series must have a @level='s'</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-author-abb-73">
      <rule context="tei:author[@full]">
         <assert test="ancestor::tei:biblStruct">The full-attribute on author may only be applied within biblStruct.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-sameAs-reference-74">
      <rule context="tei:author[@sameAs]">
         <assert test="id(substring(@sameAs,2)) or starts-with(@sameAs, 'wega:')">There must be an element with the xml:id = "<value-of select="substring(@sameAs,2)"/>" which is the target of this @sameAs.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-WeGA-editor-75">
      <rule context="tei:editor[parent::tei:titleStmt]">
         <assert test=".='Carl-Maria-von-Weber-Gesamtausgabe'">The editor of the file should always be 'Carl-Maria-von-Weber-Gesamtausgabe'.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-duplicate-title-76">
      <rule context="tei:title[following-sibling::tei:title]">
         <let name="level" value="@level"/>
         <let name="type" value="string(@type)"/>
         <let name="lang" value="string(@xml:lang)"/>
         <report test="following-sibling::tei:title[@level = $level][string(@xml:lang) = $lang][string(@type) = $type]">Following title without differing @type or xml:lang attribute</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-punctuation-mark-77">
      <rule context="tei:title">
         <report test="matches(normalize-space(self::tei:title), '[\.,;]$') and not(matches(normalize-space(self::tei:title), '((\p{Lu})|(\setc)|(\sal)|([\s\.]a)|(\sBl)|(\sAufl)|(\s&amp;c))\.$'))">Found a non-valid punctuation mark at the end of <name/>
         </report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-report-leading-zeros-78">
      <rule context="tei:title">
         <report test="matches(., '\s0\d+\.')">please do not prefix numbers with a zero</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-report-quotation-marks-79">
      <rule context="tei:title">
         <report test="matches(., '&#34;“„')">please replace literal quotation marks with q-tags</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-duplicate-biblScope-type-80">
      <rule context="tei:imprint">
         <report test="count(distinct-values(tei:biblScope/@type)) ne count(tei:biblScope/@type)">duplicate value for biblScope</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-relatedItem-type-within-notesStmt-81">
      <rule context="tei:relatedItem">
         <report test="@type and not(parent::tei:notesStmt)">The @type attribute on <name/> must only be used within the notesStmt.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-relatedItem-target-within-notesStmt-82">
      <rule context="tei:relatedItem[parent::tei:notesStmt][not(starts-with(ancestor::tei:TEI/@xml:id, 'A22'))]">
         <assert test="@target and @type">Within the notesStmt you must supply both the @target and the @type attribute on <name/>.</assert>
         <assert test="starts-with(@target, 'wega:')">Within the notesStmt, pointers to WeGA resources with the @target attribute must be prefixed with 'wega:'.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-targetorcontent1-83">
      <rule context="tei:relatedItem">
         <report test="@target and count( child::* ) &gt; 0">If the @target attribute on <name/> is used, the relatedItem element must be empty</report>
         <assert test="@target or child::*">A relatedItem element should have either a @target attribute or a child element to indicate the related bibliographic item</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-l-indent-n-84">
      <rule context="tei:l[@n]">
         <assert test="@rend='indent'">The @n-attribute is only supported in combination with @rend='indent'</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-abstractModel-structure-l-in-l-85">
      <rule context="tei:l">
         <report test="ancestor::tei:l[not(.//tei:note//tei:l[. = current()])]">Abstract model violation: Lines may not contain lines or lg elements.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-lg-indent-n-86">
      <rule context="tei:lg[@n]">
         <assert test="@rend='indent'">The @n-attribute is only supported in combination with @rend='indent'</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-atleast1oflggapl-87">
      <rule context="tei:lg">
         <assert test="count(descendant::tei:lg|descendant::tei:l|descendant::tei:gap) &gt; 0">An lg element must contain at least one child l, lg, or gap element.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-abstractModel-structure-lg-in-l-88">
      <rule context="tei:lg">
         <report test="ancestor::tei:l[not(.//tei:note//tei:lg[. = current()])]">Abstract model violation: Lines may not contain line groups.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-count-notes-90">
      <rule context="tei:notesStmt">
         <report test="count(tei:note/@type) ne count(distinct-values(tei:note/concat(@type, @xml:lang, @target)))">Only one summary, incipit, and editorial are allowed within notesStmt.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-no-language-for-revealed-correspondence-91">
      <rule context="tei:langUsage[preceding-sibling::tei:correspDesc/@n='revealed']">
         <report test="following::tei:body[normalize-space(.) eq '']">Revealed correspondence must not have language information.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-assert-status-alignment-92">
      <rule context="tei:revisionDesc[tei:change/@status]">
         <assert test="@status eq (tei:change/@status)[1]">The value of the status-attribute on <name/> should be in congruence with the latest status value on a change child element.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-assert-chronologic-order-93">
      <rule context="tei:change[preceding::tei:change]">
         <assert test="preceding::tei:change/string(@when) &gt;= string(@when)">The change elements should be ordered by date descending, i.e. the latest entry should be on top.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-report-future-dates-94">
      <rule context="tei:change">
         <report test="string(@when) &gt; (current-date() cast as xs:string)">The when-attribute must not refer to a future date.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-non-empty-body-needs-langUsage-95">
      <rule context="tei:body[string-length(normalize-space(.)) - string-length(normalize-space(string-join(.//tei:notatedMusic, ' '))) gt 0]">
         <assert test="preceding::tei:langUsage">The langUsage element must be provided when text is present.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-at-least-one-div-96">
      <rule context="tei:body[parent::tei:text]">
         <assert test="tei:div">At least one div element must be present.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-abstractModel-structure-div-in-l-97">
      <rule context="tei:l//tei:div">
         <assert test="ancestor::tei:floatingText"> Abstract model violation: Metrical lines may not contain higher-level structural elements such as div, unless div is a descendant of floatingText.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-abstractModel-structure-div-in-ab-or-p-98">
      <rule context="tei:div">
         <report test="(ancestor::tei:p or ancestor::tei:ab) and not(ancestor::tei:floatingText)"> Abstract model violation: p and ab may not contain higher-level structural elements such as div, unless div is a descendant of floatingText.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-parent-org-99">
      <rule context="tei:orgName[parent::tei:org]">
         <report test="@key or not(@type)">It is required to give the type ('alt' or 'reg') of the name while @key is forbiden here.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-parent-org-reg-100">
      <rule context="tei:orgName[parent::tei:org and not(preceding::tei:orgName)]">
         <assert test="@type='reg'">There must exactly be one name with @type='reg'.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-parent-org-reg2-101">
      <rule context="tei:orgName[parent::tei:org and preceding::tei:orgName]">
         <report test="@type='reg'">Only the first name can be of @type='reg'. Following names are supposed to be alternative names, @type='alt'.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-parent-not-org-102">
      <rule context="tei:orgName[not(parent::tei:org)]">
         <report test="@type">No @type attribute allowed here.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-collapsible-head-103">
      <rule context="tei:table[@rend='collapsible']">
         <assert test="tei:head">For the collapsible feature to work a head must be given for the <name/>.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-number-of-cells-104">
      <rule context="tei:row[preceding-sibling::tei:row]">
         <let name="thisNode" value="."/>
         <let name="thisRowCellCount"
              value="count(tei:cell[not(@cols)]) + sum(tei:cell/@cols)"/>
         <let name="precedingCellsWithRowspan"
              value="preceding-sibling::tei:row/tei:cell[@rows][some $i in (1 to xs:integer(@rows - 1)) satisfies parent::tei:row/following-sibling::tei:row[$i] is $thisNode]"/>
         <let name="precedingCellsWithRowspanPlus1"
              value="preceding-sibling::tei:row/tei:cell[@rows][some $i in (1 to xs:integer(@rows)) satisfies parent::tei:row/following-sibling::tei:row[$i] is $thisNode]"/>
         <let name="precedingCellsWithRowspanCount"
              value="count($precedingCellsWithRowspan[not(@cols)]) + sum($precedingCellsWithRowspan/@cols)"/>
         <let name="precedingRowCellCount"
              value="                             count(preceding-sibling::tei:row[1]/tei:cell[not(@cols)])                              + sum(preceding-sibling::tei:row[1]/tei:cell/@cols)                              + count(($precedingCellsWithRowspanPlus1 except preceding-sibling::tei:row[1]/tei:cell)[not(@cols)])                             + sum(($precedingCellsWithRowspanPlus1 except preceding-sibling::tei:row[1]/tei:cell)/@cols)"/>
         <assert test="$thisRowCellCount + $precedingCellsWithRowspanCount = $precedingRowCellCount">The total ammount of cells should be equal for every row in a table. This row ammounts to <value-of select="$thisRowCellCount + $precedingCellsWithRowspanCount"/> cells (possibly affected by some preceding rowspans, i.e. cell/@rows) instead of <value-of select="$precedingRowCellCount"/> for the preceding row.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-cell-rows-105">
      <rule context="tei:cell[@rows]">
         <report test="(count(parent::tei:row/following-sibling::tei:row) + 1) lt number(@rows)">There are less following rows than indicated in the @rows attribute.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-graphicOrSameAs-106">
      <rule context="tei:facsimile">
         <assert test="@sameAs or tei:graphic">A facsimile element must have (at least) a nested graphic element or a @sameAs attribute</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-sourceNwitness-107">
      <rule context="tei:facsimile[preceding::tei:witness or preceding::tei:msFrag or preceding-sibling::tei:facsimile or following-sibling::tei:facsimile]">
         <let name="source" value="@source"/>
         <assert test="@source and preceding::tei:sourceDesc//tei:*[concat('#',@xml:id) = $source]">A facsimile element must have a @source attribute pointing at the respective element in the sourceDesc</assert>
         <report test="preceding-sibling::tei:facsimile/@source = $source">Duplicate source reference detected.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-sourcePattern-108">
      <rule context="tei:facsimile[@source]">
         <let name="source" value="@source"/>
         <assert test="matches(@source, '^https?|#')">The source attribute must be a local reference (starting with '#') or a pointer to an online resource (starting with http)</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-no_facsimile_text_nodes-109">
      <rule context="tei:facsimile//tei:line | tei:facsimile//tei:zone">
         <report test="child::text()[ normalize-space(.) ne '']"> A facsimile element represents a text with images, thus transcribed text should not be present within it.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-addSpan-requires-spanTo-110">
      <rule context="tei:addSpan">
         <assert test="@spanTo">The @spanTo attribute of <name/> is required.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-spanTo-7-112">
      <rule context="tei:*[@spanTo]">
         <assert test="id(substring(@spanTo,2)) and following::*[@xml:id=substring(current()/@spanTo,2)]"> The element indicated by @spanTo (<value-of select="@spanTo"/>) must follow the current element <name/>
         </assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-delSpan-requires-spanTo-113">
      <rule context="tei:delSpan">
         <assert test="@spanTo">The @spanTo attribute of <name/> is required.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-substContents1-115">
      <rule context="tei:subst">
         <assert test="child::tei:add and (child::tei:del or child::tei:surplus)">
            <name/> must have at least one child add and at least one child del or surplus</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-one_ms_singleton_max-116">
      <rule context="tei:msContents|tei:physDesc|tei:history|tei:additional"> <!-- Note: This rule applies to <msContents>, <physDesc>,
             <history>, and <additional> wherever they occur. Luckily
             they are only allowed in places where they are
             constrained to 0 or 1 occurence. If that changes someday,
             this constraint may will likely need to be updated,
             too. --> <!-- Also worth noting that
             a) if & when we can use abstract patterns, this would be
             better handled as a single abstract rule somewhere, and
             concrete rules in the individual <elementSpec>s; and
             b) I did not test for the existence of "../*[name(.) eq
             $gi][2]" because then an error would be generated for
             each of the multiple occurences of $gi. -->
         <let name="gi" value="name(.)"/>
         <report test="preceding-sibling::*[ name(.) eq $gi ]                           and                           not( following-sibling::*[ name(.) eq $gi ] )"> Only one <name/> is allowed as a child of <value-of select="name(..)"/>.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-msId_minimal-117">
      <rule context="tei:msIdentifier">
         <report test="not( parent::tei:msPart )                           and                           ( child::*[1]/self::idno  or  child::*[1]/self::altIdentifier  or  normalize-space(.) eq '')">An msIdentifier must contain either a repository or location.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-empty-physDesc-118">
      <rule context="tei:physDesc">
         <assert test="*">
            <name/> must contain at least one p or accMat element</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-activeOrPassivePerformance-119">
      <rule context="tei:seg">
         <report test="./@subtype = ('active', 'passive') and not(./@type = 'performance')">if @subtype contains 'active' or 'passive' @type has to be 'performance'</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-AddresseeOrSenderCorrespondence-120">
      <rule context="tei:seg">
         <report test="./@subtype = ('sender', 'addressee') and not(./@type = 'correspondence')">if @subtype contains 'sender' or 'addressee' @type has to be 'correspondence'</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-att-wit-121">
      <rule context="tei:*[@wit]">
         <let name="wit" value="@wit"/>
         <assert test="preceding::tei:witness[@xml:id = substring($wit, 2)]">The @wit-attribute must point at some witness element</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-only-one-witness-122">
      <rule context="tei:listWit">
         <report test="count(tei:witness) le 1">There should always be more than one witness within a listWit element.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-enforce-ref-attribute-for-smufl-characters-123">
      <rule context="tei:g[@type='smufl']">
         <assert test="@ref">g-elements of @type='smufl' must provide a @ref-attribute to point to an external reference.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-styleguide-document-node-content-124">
      <rule context="document-node()">
         <report test="count(processing-instruction()) ne 2">WeGA styleguide error: there should exactly be two processing instructions before the root element</report>
         <report test="comment()">WeGA styleguide error: there should be no comments outside the root element</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-whitespaceOnlyContent-125">
      <rule context="tei:surname | tei:forename | tei:persName | tei:author[not(@sameAs)] | tei:occupation |                      tei:settlement | tei:country | tei:region | tei:rs | tei:workName | tei:characterName |                      tei:hi[not(.//tei:gap or tei:g)] | tei:head | tei:note[not(@type=('thematicCom'))] | tei:placeName | tei:title |                      tei:seg | tei:item[not(@* or *)] | tei:publisher | mei:publisher | tei:relatedItem[ancestor::tei:sourceDesc] |                      tei:listBibl | tei:additional[ancestor::tei:sourceDesc]">
         <report test="normalize-space(.) = ''">
            <name/> has whitespace only content</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-elementStartsWithWhitespace-126">
      <rule context="tei:surname | tei:forename | tei:persName[not(@type)] | tei:author | tei:occupation | tei:settlement | tei:country | tei:region | tei:rs | tei:workName | tei:characterName | tei:hi | tei:placeName[not(parent::tei:address or parent::tei:birth or parent::tei:death)]">
         <report test="matches(.,'^\s') and (node()[1] = text()[1])">whitespace at the beginning of element <name/>
         </report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-untrimmedAttributeValues-127">
      <rule context="*[@*]">
         <report test="some $i in @* satisfies string-length(normalize-unicode(normalize-space(replace($i, ' | | | ', ' ')))) ne string-length($i)">There is some whitespace here at the beginning or end of some attribute value.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-wegaTargets-128">
      <rule context="*[starts-with(@target, 'wega:')]">
         <assert test="matches(@target, '^wega:A[0-9A-F]{6}(#.+)?(\s+wega:A[0-9A-F]{6}(#.+)?)*$')">"wega"-prefixed URIs must follow the pattern "wega:A002068" (i.e. without any file extension)</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-emojiCheck-129">
      <rule context="*[some $i in text() satisfies normalize-space($i) ne '']">
         <report test="matches(., '[⌚-⌛]|[⏩-⏬]|[⏰]|[⏳]|[◽-◾]|[☔-☕]|[♈-♓]|[♿]|[⚓]|[⚡]|[⚪-⚫]|[⚽-⚾]|[⛄-⛅]|[⛎]|[⛔]|[⛪]|[⛲-⛳]|[⛵]|[⛺]|[⛽]|[✅]|[✊-✋]|[✨]|[❌]|[❎]|[❓-❕]|[❗]|[➕-➗]|[➰]|[➿]|[⬛-⬜]|[⭐]|[⭕]|[🀄]|[🃏]|[🆎]|[🆑-🆚]|[🇦-🇿]|[🈁]|[🈚]|[🈯]|[🈲-🈶]|[🈸-🈺]|[🉐-🉑]|[🌀-🌠]|[🌭-🌯]|[🌰-🌵]|[🌷-🍼]|[🍾-🍿]|[🎀-🎓]|[🎠-🏄]|[🏅]|[🏆-🏊]|[🏏-🏓]|[🏠-🏰]|[🏴]|[🏸-🏿]|[🐀-🐾]|[👀]|[👂-📷]|[📸]|[📹-📼]|[📿]|[🔀-🔽]|[🕋-🕎]|[🕐-🕧]|[🕺]|[🖕-🖖]|[🖤]|[🗻-🗿]|[😀]|[😁-😐]|[😑]|[😒-😔]|[😕]|[😖]|[😗]|[😘]|[😙]|[😚]|[😛]|[😜-😞]|[😟]|[😠-😥]|[😦-😧]|[😨-😫]|[😬]|[😭]|[😮-😯]|[😰-😳]|[😴]|[😵-🙀]|[🙁-🙂]|[🙃-🙄]|[🙅-🙏]|[🚀-🛅]|[🛌]|[🛐]|[🛑-🛒]|[🛕]|[🛫-🛬]|[🛴-🛶]|[🛷-🛸]|[🛹]|[🛺]|[🟠-🟫]|[🤍-🤏]|[🤐-🤘]|[🤙-🤞]|[🤟]|[🤠-🤧]|[🤨-🤯]|[🤰]|[🤱-🤲]|[🤳-🤺]|[🤼-🤾]|[🤿]|[🥀-🥅]|[🥇-🥋]|[🥌]|[🥍-🥏]|[🥐-🥞]|[🥟-🥫]|[🥬-🥰]|[🥱]|[🥳-🥶]|[🥺]|[🥻]|[🥼-🥿]|[🦀-🦄]|[🦅-🦑]|[🦒-🦗]|[🦘-🦢]|[🦥-🦪]|[🦮-🦯]|[🦰-🦹]|[🦺-🦿]|[🧀]|[🧁-🧂]|[🧃-🧊]|[🧍-🧏]|[🧐-🧦]|[🧧-🧿]|[🩰-🩳]|[🩸-🩺]|[🪀-🪂]|[🪐-🪕]')">Text contains characters with Emoji presentation as default.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-sourceMustResolve-130">
      <rule context="*[starts-with(@source, '#')]">
         <let name="source" value="@source"/>
         <assert test="id(substring($source,2))">Unable to locate the reference provided by the @source attribute.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-targetMustResolve-131">
      <rule context="*[starts-with(@target, '#')][not(ancestor::teix:*)]">
         <let name="target" value="@target"/>
         <assert test="id(substring($target,2))">Unable to locate the reference provided by the @target attribute.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-anonymus-id-132">
      <rule context="*[@key|@codedval]">
         <report test="(@key | @codedval) = 'A007979'">Please do not link to the anonymus ID.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-underline-n-133">
      <rule context="*:hi[@n] | *:rend[@n]">
         <assert test="@rend = ('underline', 'indent')">The @n-attribute is only supported in combination with @rend='underline' and @rend='indent'</assert>
      </rule>
   </pattern>
</schema>
