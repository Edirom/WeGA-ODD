<?xml version="1.0" encoding="utf-8"?>
<schema xmlns="http://purl.oclc.org/dsdl/schematron" queryBinding="xslt2">
   <title>ISO Schematron rules</title>
   <!-- This file generated 2020-09-10T07:11:36Z by 'extract-isosch.xsl'. -->

   <!-- ********************* -->
   <!-- namespaces, declared: -->
   <!-- ********************* -->
   <ns prefix="mei" uri="http://www.music-encoding.org/ns/mei"/>

   <!-- ********************* -->
   <!-- namespaces, implicit: -->
   <!-- ********************* -->


   <!-- ************ -->
   <!-- constraints: -->
   <!-- ************ -->
   <pattern id="isoschematron-constraint-wegaWorks-data.ARTICULATION-warn_deprecated-1">
        <rule context="@artic">
          <assert role="warning"
                 test="not(contains(., 'marc-stacc')) and not(contains(., 'ten-stacc'))">"<value-of select="."/>" contains a deprecated value.</assert>
        </rule>
        <rule context="@artic.ges">
          <assert role="warning"
                 test="not(contains(., 'marc-stacc')) and not(contains(., 'ten-stacc'))">"<value-of select="."/>" contains a deprecated value.</assert>
        </rule>
      </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-data.PLACEMENT-constrain_place-2">
        <rule context="@place">
          <assert test="not((some $token in tokenize(normalize-space(.),' ') satisfies              $token =('below','above','between','within')) and count(tokenize(normalize-space(.),' ')) gt 1)">Other values not permitted when 'above', 'below', 'between' or 'within' is
            present.</assert>
        </rule>
      </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-data.STAFFREL-between_requires_adjacent_staves-3">
        <rule context="mei:*[@place eq 'between']">
          <assert test="count(tokenize(normalize-space(string(@staff)), '\s+')) = 2">The @staff
            attribute must contain 2 numerically-adjacent integer values.</assert>
          <let name="tokenizedStaff"
              value="tokenize(normalize-space(string(@staff)), '\s+')"/>
          <let name="maxValue"
              value="max((number($tokenizedStaff[1]), number($tokenizedStaff[2])))"/>
          <let name="minValue"
              value="min((number($tokenizedStaff[1]), number($tokenizedStaff[2])))"/>
          <assert test="$maxValue - $minValue = 1">Staves <value-of select="$minValue"/> and
            <value-of select="$maxValue"/> are not adjacent.</assert>
        </rule>
      </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-att.notationType-notationsubtype-When_notationsubtype-4">
            <rule context="mei:*[@notationsubtype]">
              <assert test="@notationtype">An element with a notationsubtype attribute must have
                a notationtype attribute.</assert>
            </rule>
          </pattern>
   <pattern id="schematron-constraint-wegaWorks-manifestation-id-check-5">
                <rule context="mei:manifestation">
                    <assert test="@xml:id or ancestor::mei:manifestation">
                        Am Wurzelelement muss eine XML-ID angegeben sein.
                    </assert>
                </rule>
            </pattern>
   <pattern id="schematron-constraint-wegaWorks-manifestation-check_singleton-6">
        <rule context="mei:manifestation[@singleton eq 'true']">
          <assert test="not(mei:itemList)">Item children are not permitted when @singleton
            equals "true".</assert>
        </rule>
      </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-componentList-checkComponentList-7">
        <rule context="mei:componentList">
          <assert test="every $i in ./child::mei:*[not(local-name()='head')] satisfies              $i/local-name() eq ./parent::mei:*/local-name()">Only child elements of the same name as the parent of the componentList are
            allowed.</assert>
        </rule>
      </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-componentList-checkComponents-8">
        <rule context="mei:componentList[mei:*[@comptype]]">
          <assert role="warning"
                 test="count(mei:*[@comptype]) = count(mei:*[local-name() ne 'head'])">When any child
            element has a comptype attribute, it is recommended that comptype appear on all child
            elements.</assert>
        </rule>
      </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-change-check_change-9">
        <rule context="mei:change">
          <assert test="@isodate or mei:date">The date of the change must be recorded in an
            isodate attribute or date element.</assert>
          <assert test="@resp or mei:respStmt[mei:name or mei:corpName or mei:persName]"
                 role="warning">It is recommended that the agent responsible for the change be recorded
            in a resp attribute or in a name, corpName, or persName element in the respStmt
            element.</assert>
        </rule>
      </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-handList-checkHandListLabels-10">
        <rule context="mei:handList[mei:label]">
          <assert role="warning" test="count(mei:label) = count(mei:hand)">When labels are used,
            usually each hand has one.</assert>
        </rule>
      </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-history-history_restriction-11">
        <rule context="mei:history[parent::mei:work or parent::mei:expression]">
          <assert test="not(mei:acquisition or mei:provenance)">The acquisition and provenance
            elements are not permitted in the work or expression context.</assert>
        </rule>
      </pattern>
   <pattern id="schematron-constraint-wegaWorks-meiHead-check_meiHead_type-12">
        <rule context="mei:meiHead[@type eq 'music']">
          <assert test="ancestor::mei:mei">The meiHead type attribute can have the value 'music'
            only when the document element is "mei".</assert>
        </rule>
        <rule context="mei:meiHead[@type eq 'corpus']">
          <assert test="ancestor::mei:meiCorpus">The meiHead type attribute can have the value
            'corpus' only when the document element is "meiCorpus".</assert>
        </rule>
        <rule context="mei:meiHead[@type eq 'independent']">
          <assert test="not(ancestor::mei:*)">The meiHead type attribute can have the value
            'independent' only when the document element is "meiHead".</assert>
        </rule>
      </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-termList-checkTermListLabels-13">
        <rule context="mei:termList[mei:label]">
          <assert role="warning" test="count(mei:label) = count(mei:term)">When labels are used,
            usually each term has one.</assert>
        </rule>
      </pattern>
   <pattern id="schematron-constraint-wegaWorks-titleStmt-multiple-same-language-titles-14">
                <rule context="mei:titleStmt[not(@analog)]">
                    <report test="some $title in mei:title[not(@type)] satisfies ($title/string(@xml:lang) = $title/following-sibling::mei:title[not(@type)]/string(@xml:lang))">Multiple title with the same xml:lang detected</report>
                </rule>
            </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-att.cleffing.log-clef_shape_requires_clef_line-15">
        <rule context="mei:*[matches(@clef.shape, '[FCG]')]">
          <assert test="@clef.line">An 'F', 'C', or 'G' clef requires that its position be
            specified.</assert>
        </rule>
        <rule context="mei:*[matches(@clef.shape, '(TAB|perc)')]">
          <assert test="@lines">A TAB or percussion clef requires that the number of lines be
            specified.</assert>
        </rule>
      </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-att.dataPointing-data-check_dataTarget-16">
            <rule context="@data">
              <assert role="warning" test="not(normalize-space(.) eq '')">@data attribute should
                have content.</assert>
              <assert role="warning"
                 test="every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:*[ancestor::mei:music]/@xml:id">The value in @data should correspond to the @xml:id attribute of a descendant of
                the music element.</assert>
            </rule>
          </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-att.metadataPointing-decls-check_declsTarget-17">
            <rule context="@decls">
              <assert role="warning" test="not(normalize-space(.) eq '')">@decls attribute
                should have content.</assert>
              <assert role="warning"
                 test="every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:*[ancestor::mei:meiHead]/@xml:id">Each value in @decls should correspond to the @xml:id attribute of an element
                within the metadata header.</assert>
              <assert test="every $i in tokenize(., '\s+') satisfies not(substring($i,2)=//mei:term/@xml:id)">No value in @decls should correspond to the @xml:id attribute of a classification
                term. Use @class for this purpose.</assert>
            </rule>
          </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-att.extent-extent-check_extent-18">
            <rule context="@extent[matches(normalize-space(.), '^\d+(\.\d+)?$')]">
              <assert role="warning" test="../@unit">The @unit attribute is
                recommended.</assert>
            </rule>
            <rule context="@extent[matches(., '\d+(\.\d+)?\s')]">
              <assert role="warning" test="../@unit">Separation into value (@extent) and unit
                (@unit) is recommended.</assert>
            </rule>
          </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-att.handIdent-hand-check_handTarget-19">
            <rule context="@hand">
              <assert role="warning" test="not(normalize-space(.) eq '')">@hand attribute should
                have content.</assert>
              <assert role="warning"
                 test="every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:hand/@xml:id">Each value in @hand should correspond to the @xml:id attribute of a hand
                element.</assert>
            </rule>
          </pattern>
   <pattern id="schematron-constraint-wegaWorks-att.linking-copyof-When_copyof_element_empty-20">
            <rule context="mei:*[@copyof]">
              <assert test="count(child::*[not(comment() or processing-instruction())]) = 0">An
                element with a copyof attribute can only have comment or processing instruction
                descendents.</assert>
            </rule>
          </pattern>
   <pattern id="schematron-constraint-wegaWorks-att.linking-copyof-check_copyofTarget-21">
            <rule context="@copyof">
              <assert role="warning" test="not(normalize-space(.) eq '')">@copyof attribute
                should have content.</assert>
              <assert role="warning"
                 test="every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:*/@xml:id">The
                value in @copyof should correspond to the @xml:id attribute of an
                element.</assert>
            </rule>
          </pattern>
   <pattern id="schematron-constraint-wegaWorks-att.linking-corresp-check_correspTarget-22">
            <rule context="@corresp">
              <assert role="warning" test="not(normalize-space(.) eq '')">@corresp attribute
                should have content.</assert>
              <assert role="warning"
                 test="every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:*/@xml:id">Each
                value in @corresp should correspond to the @xml:id attribute of an
                element.</assert>
            </rule>
          </pattern>
   <pattern id="schematron-constraint-wegaWorks-att.linking-follows-check_followsTarget-23">
            <rule context="@follows">
              <assert role="warning" test="not(normalize-space(.) eq '')">@follows attribute
                should have content.</assert>
              <assert role="warning"
                 test="every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:*/@xml:id">Each
                value in @follows must correspond to the @xml:id attribute of an
                element.</assert>
            </rule>
          </pattern>
   <pattern id="schematron-constraint-wegaWorks-att.linking-next-check_nextTarget-24">
            <rule context="@next">
              <assert role="warning" test="not(normalize-space(.) eq '')">@next attribute should
                have content.</assert>
              <assert role="warning"
                 test="every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:*/@xml:id">Each
                value in @next should correspond to the @xml:id attribute of an
                element.</assert>
            </rule>
          </pattern>
   <pattern id="schematron-constraint-wegaWorks-att.linking-precedes-check_precedesTarget-25">
            <rule context="@precedes">
              <assert role="warning" test="not(normalize-space(.) eq '')">@precedes attribute
                should have content.</assert>
              <assert role="warning"
                 test="every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:*/@xml:id">Each
                value in @precedes must correspond to the @xml:id attribute of an
                element.</assert>
            </rule>
          </pattern>
   <pattern id="schematron-constraint-wegaWorks-att.linking-prev-check_prevTarget-26">
            <rule context="@prev">
              <assert role="warning" test="not(normalize-space(.) eq '')">@prev attribute should
                have content.</assert>
              <assert role="warning"
                 test="every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:*/@xml:id">Each
                value in @prev should correspond to the @xml:id attribute of an
                element.</assert>
            </rule>
          </pattern>
   <pattern id="schematron-constraint-wegaWorks-att.linking-sameas-check_sameasTarget-27">
            <rule context="@sameas">
              <assert role="warning" test="not(normalize-space(.) eq '')">@sameas attribute
                should have content.</assert>
              <assert role="warning"
                 test="every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:*/@xml:id">Each
                value in @sameas should correspond to the @xml:id attribute of an
                element.</assert>
            </rule>
          </pattern>
   <pattern id="schematron-constraint-wegaWorks-att.linking-synch-check_synchTarget-28">
            <rule context="@synch">
              <assert role="warning" test="not(normalize-space(.) eq '')">@synch attribute
                should have content.</assert>
              <assert role="warning"
                 test="every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:*/@xml:id">Each
                value in @synch should correspond to the @xml:id attribute of an
                element.</assert>
            </rule>
          </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-att.name-nymref-check_nymrefTarget-29">
            <rule context="@nymref">
              <assert role="warning" test="not(normalize-space(.) eq '')">@nymref attribute
                should have content.</assert>
              <assert role="warning"
                 test="every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:*/@xml:id">The
                value in @nymref should correspond to the @xml:id attribute of an
                element.</assert>
            </rule>
          </pattern>
   <pattern id="schematron-constraint-wegaWorks-att.partIdent-part-check_part_attr_all-30">
            <rule context="@part[some $i in tokenize(., '\s+') satisfies (matches($i, '^%all$'))]">
              <assert test="count(tokenize(., '\s+')) = 1">'%all' cannot be mixed with other
                values.</assert>
            </rule>
          </pattern>
   <pattern id="schematron-constraint-wegaWorks-att.partIdent-partstaff-check_partstaff_attr_all-31">
            <rule context="@partstaff[some $i in tokenize(., '\s+') satisfies (matches($i, '^%all$'))]">
              <assert test="count(tokenize(., '\s+')) = 1">'%all' cannot be mixed with other
                values.</assert>
            </rule>
          </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-att.plist-plist-check_plistTarget-32">
            <rule context="@plist">
              <assert role="warning" test="not(normalize-space(.) eq '')">@plist attribute
                should have content.</assert>
              <assert role="warning"
                 test="every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:*/@xml:id">Each
                value in @plist should correspond to the @xml:id attribute of an
                element.</assert>
            </rule>
          </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-att.ranging-confidence-check_confidence-33">
            <rule context="mei:*[@confidence]">
              <assert test="@min and @max">The attributes @min and @max are required when
                @confidence is present.</assert>
            </rule>
          </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-att.responsibility-resp-check_respTarget-34">
            <rule context="@resp">
              <assert role="warning" test="not(normalize-space(.) eq '')">@resp attribute should
                have content.</assert>
              <assert role="warning"
                 test="every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:*[ancestor::mei:meiHead]/@xml:id">The value in @resp should correspond to the @xml:id attribute of an element within
                the metadata header.</assert>
            </rule>
          </pattern>
   <pattern id="schematron-constraint-wegaWorks-att.source-source-check_sourceTarget-35">
            <rule context="@source">
              <assert role="warning" test="not(normalize-space(.) eq '')">@source attribute
                should have content.</assert>
              <assert role="warning"
                 test="every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:*[local-name() eq 'source' or local-name() eq 'manifestation']/@xml:id">Each value in @source should correspond to the @xml:id attribute of a source or
                manifestation element.</assert>
            </rule>
          </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-att.startEndId-endid-check_endidTarget-36">
            <rule context="@endid">
              <assert role="warning" test="not(normalize-space(.) eq '')">@endid attribute
                should have content.</assert>
              <assert role="warning"
                 test="every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:*/@xml:id">The
                value in @endid should correspond to the @xml:id attribute of an
                element.</assert>
            </rule>
          </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-att.startId-startid-check_startidTarget-37">
            <rule context="@startid">
              <assert role="warning" test="not(normalize-space(.) eq '')">@startid attribute
                should have content.</assert>
              <assert role="warning"
                 test="every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:*/@xml:id">The
                value in @startid should correspond to the @xml:id attribute of an
                element.</assert>
            </rule>
          </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-annot-Check_annot_data-38">
        <rule context="mei:annot[@data]">
          <assert test="ancestor::mei:notesStmt">The @data attribute may only occur on an
            annotation within the notesStmt element.</assert>
        </rule>
      </pattern>
   <pattern id="schematron-constraint-wegaWorks-creation-check_creationDateHasText-39">
      <rule context="mei:creation">
                <assert test="mei:date/text()">The creation date should have human readable text as content.</assert>
            </rule>
   </pattern>
   <pattern id="schematron-constraint-wegaWorks-date-dateHeuristics1-40">
      <rule context="mei:date">
                <report test="(@notbefore gt @notafter) and not(starts-with(@notbefore, '-'))">value of notBefore greater than notAfter</report>
            </rule>
   </pattern>
   <pattern id="schematron-constraint-wegaWorks-date-dateHeuristics3-41">
      <rule context="mei:date">
                <report test="(@startdate or @enddate) and (@isodate or @notafter or @notbefore)">cooccurence of date and duration attributes</report>
            </rule>
   </pattern>
   <pattern id="schematron-constraint-wegaWorks-date-dateHeuristics4-42">
      <rule context="mei:date">
                <report test="@isodate and (@notafter or @notbefore)">cooccurence of exact and uncertain date attributes</report>
            </rule>
   </pattern>
   <pattern id="schematron-constraint-wegaWorks-date-dateHeuristics5-43">
      <rule context="mei:date">
                <assert test="@isodate or @notbefore or @notafter or @startdate or @enddate or @cert='unknown' or matches(., '0000|o\.J\.|unknown')">mei:date benötigt ein Attribut @isodate, @notbefore o.ä.</assert>
            </rule>
   </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-dimensions-check_dimensions-44">
        <rule context="mei:physDesc/mei:dimensions">
          <assert test="not(count(mei:depth) &gt; 1)">The depth element may only appear
            once.</assert>
          <assert test="not(count(mei:height) &gt; 1)">The height element may only appear
            once.</assert>
          <assert test="not(count(mei:width) &gt; 1)">The width element may only appear
            once.</assert>
        </rule>
      </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-mei-Check_staff-45">
        <rule context="mei:*[@staff]">
          <assert test="every $i in tokenize(normalize-space(@staff), '\s+') satisfies $i=//mei:staffDef/@n">The values in @staff must correspond to @n attribute of a staffDef
            element.</assert>
        </rule>
      </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-relation-FRBR_relation-46">
        
        <rule context="mei:relationList/mei:relation[parent::mei:work or parent::mei:expression or                        parent::mei:source or parent::mei:item]">
          <assert test="matches(@rel, 'hasAbridgement') or             matches(@rel, 'hasAbridgement') or             matches(@rel, 'isAbridgementOf') or             matches(@rel, 'hasAdaptation') or             matches(@rel, 'isAdaptationOf') or             matches(@rel, 'hasAlternate') or             matches(@rel, 'isAlternateOf') or             matches(@rel, 'hasArrangement') or             matches(@rel, 'isArrangementOf') or             matches(@rel, 'hasComplement') or             matches(@rel, 'isComplementOf') or             matches(@rel, 'hasEmbodiment') or             matches(@rel, 'isEmbodimentOf') or             matches(@rel, 'hasExemplar') or             matches(@rel, 'isExemplarOf') or             matches(@rel, 'hasImitation') or             matches(@rel, 'isImitationOf') or             matches(@rel, 'hasPart') or             matches(@rel, 'isPartOf') or             matches(@rel, 'hasRealization') or             matches(@rel, 'isRealizationOf') or             matches(@rel, 'hasReconfiguration') or             matches(@rel, 'isReconfigurationOf') or             matches(@rel, 'hasReproduction') or             matches(@rel, 'isReproductionOf') or             matches(@rel, 'hasRevision') or             matches(@rel, 'isRevisionOf') or             matches(@rel, 'hasSuccessor') or             matches(@rel, 'isSuccessorOf') or             matches(@rel, 'hasSummarization') or             matches(@rel, 'isSummarizationOf') or             matches(@rel, 'hasSupplement') or             matches(@rel, 'isSupplementOf') or             matches(@rel, 'hasTransformation') or             matches(@rel, 'isTransformationOf') or             matches(@rel, 'hasTranslation') or             matches(@rel, 'isTranslationOf')">Within work, expression, source, or item, the value of the rel attribute must match one
            of the following: hasAbridgement, isAbridgementOf, hasAdaptation, isAdaptationOf,
            hasAlternate, isAlternateOf, hasArrangement, isArrangementOf, hasComplement,
            isComplementOf, hasEmbodiment, isEmbodimentOf, hasExemplar, isExemplarOf, hasImitation,
            isImitationOf, hasPart, isPartOf, hasRealization, isRealizationOf, hasReconfiguration,
            isReconfigurationOf, hasReproduction, isReproductionOf, hasRevision, isRevisionOf,
            hasSuccessor, isSuccessorOf, hasSummarization, isSummarizationOf, hasSupplement,
            isSupplementOf, hasTransformation, isTransformationOf, hasTranslation,
            isTranslationOf</assert>
          <assert test="@target">Within work, expression, source or item, the target attribute
            must be present.</assert>
        </rule>
      </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-section-Check_sectionexpansion-47">
        <rule context="mei:section[mei:expansion]">
          <assert test="descendant::mei:section|descendant::mei:ending|descendant::mei:rdg">A
            section containing an expansion element must have descendant section, ending, or rdg
            elements.</assert>
        </rule>
      </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-staffDef-Check_staffDefn-48">
        <rule context="mei:staffDef[not(ancestor::mei:staff)]">
          <let name="thisstaff" value="@n"/>
          <assert test="@n">StaffDef must have an n attribute.</assert>
          <assert test="@lines or preceding::mei:staffDef[@n=$thisstaff and @lines]"> Either
            @lines must be present or a preceding staffDef with the same value for @n and @lines
            must exist.</assert>
          <assert test="count(mei:clef) + count(mei:clefGrp) &lt; 2">Only one clef or clefGrp is
            permitted.</assert>
        </rule>
      </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-staffDef-Check_ancestor_staff-49">
        <rule context="mei:staffDef[ancestor::mei:staff and @n]">
          <let name="thisstaff" value="@n"/>
          <assert test="ancestor::mei:staff/@n eq $thisstaff">@n must have the same value as the
            current staff.</assert>
        </rule>
      </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-staffDef-Check_ancestor_staff_lines-50">
        <rule context="mei:staffDef[ancestor::mei:staff and not(@n)]">
          <let name="thisstaff" value="ancestor::mei:staff/@n"/>
          <assert test="@lines or preceding::mei:staffDef[@n=$thisstaff and @lines]"> Either
            @lines must be present or a preceding staffDef with matching @n value and @lines must
            exist.</assert>
        </rule>
      </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-staffDef-Check_clef_position_staffDef-51">
        <rule context="mei:staffDef[@clef.line and @lines]">
          <assert test="number(@clef.line) &lt;= number(@lines)">The clef position must be less
            than or equal to the number of lines on the staff.</assert>
        </rule>
      </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-staffDef-Check_clef_position_staffDef_nolines-52">
        <rule context="mei:staffDef[@clef.line and not(@lines)]">
          <let name="thisstaff" value="@n"/>
          <let name="stafflines"
              value="preceding::mei:staffDef[@n=$thisstaff and @lines][1]/@lines"/>
          <assert test="number(@clef.line) &lt;= number($stafflines)">The clef position must be
            less than or equal to the number of lines on the staff.</assert>
        </rule>
      </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-staffDef-Check_tab_strings_lines-53">
        <rule context="mei:staffDef[@tab.strings and @lines]">
          <let name="countTokens"
              value="count(tokenize(normalize-space(@tab.strings), '\s'))"/>
          <assert test="$countTokens = @lines">The tab.strings attribute must have the same
            number of values as there are staff lines.</assert>
        </rule>
      </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-staffDef-Check_tab_strings_nolines-54">
        <rule context="mei:staffDef[@tab.strings and not(@lines)]">
          <let name="countTokens"
              value="count(tokenize(normalize-space(@tab.strings), '\s'))"/>
          <let name="thisstaff" value="@n"/>
          <assert test="$countTokens = preceding::mei:staffDef[@n=$thisstaff and @lines][1]/@lines">The
            tab.strings attribute must have the same number of values as there are staff
            lines.</assert>
        </rule>
      </pattern>
        <pattern>
          <rule context="mei:staffDef[@lines.color and @lines]">
            <let name="countTokens"
              value="count(tokenize(normalize-space(@lines.color), '\s'))"/>
            <assert test="$countTokens = 1 or $countTokens = @lines">The lines.color attribute
              must have either 1) a single value or 2) the same number of values as there are staff
              lines.</assert>
          </rule>
          <rule context="mei:staffDef[@lines.color and not(@lines)]">
            <let name="countTokens"
              value="count(tokenize(normalize-space(@lines.color), '\s'))"/>
            <let name="thisstaff" value="@n"/>
            <assert test="$countTokens = 1 or $countTokens = preceding::mei:staffDef[@n=$thisstaff and @lines][1]/@lines">The lines.color attribute must have either 1) a single value or 2) the same number of
              values as there are staff lines.</assert>
          </rule>
        </pattern>
      
        <pattern>
          <rule context="mei:staffDef[@ppq][ancestor::mei:scoreDef[@ppq]]">
            <let name="staffPPQ" value="@ppq"/>
            <let name="scorePPQ" value="ancestor::mei:scoreDef[@ppq][1]/@ppq"/>
            <assert test="($scorePPQ mod $staffPPQ) = 0">The value of ppq must be a factor of
              the value of ppq on an ancestor scoreDef.</assert>
          </rule>
        </pattern>
      
        <pattern>
          <rule context="mei:staffDef[@ppq][preceding::mei:scoreDef[@ppq]]">
            <let name="staffPPQ" value="@ppq"/>
            <let name="scorePPQ" value="preceding::mei:scoreDef[@ppq][1]/@ppq"/>
            <assert test="($scorePPQ mod $staffPPQ) = 0">The value of ppq must be a factor of
              the value of ppq on a preceding scoreDef.</assert>
          </rule>
        </pattern>
      <pattern id="isoschematron-constraint-wegaWorks-staffGrp-Check_staffGrp_unique_staff_n_values-58">
        <rule context="mei:staffGrp">
          <let name="countstaves" value="count(descendant::mei:staffDef)"/>
          <let name="countuniqstaves"
              value="count(distinct-values(descendant::mei:staffDef/@n))"/>
          <assert test="$countstaves eq $countuniqstaves">Each staffDef must have a unique value
            for the n attribute.</assert>
        </rule>
      </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-term-Check_term_dataTarget-59">
        <rule context="mei:term[@data]">
          <assert test="ancestor::mei:classification">The @data attribute may only occur on a
            term which is a descendant of a classification element.</assert>
        </rule>
      </pattern>
   <pattern id="schematron-constraint-wegaWorks-title-work-subtitles-map-xmllang-60">
                <rule context="mei:title[@type='sub'][parent::mei:titleStmt]">
                    <assert test="string(@xml:lang) = preceding-sibling::mei:title/string(@xml:lang)">Make sure that this subtitle has a proper xml:lang attribute matching a preceding title's xml:lang</assert>
                </rule>
            </pattern>
   <pattern id="schematron-constraint-wegaWorks-styleguide-document-node-content-61">
                <rule context="document-node()">
                    <report test="count(processing-instruction()) ne 2">WeGA styleguide error: there should exactly be two processing instructions before the root element</report>
                    <report test="comment()">WeGA styleguide error: there should be no comments outside the root element</report>
                </rule>
            </pattern>
   <pattern id="schematron-constraint-wegaWorks-att.wega.rend-underline-n-62">
                    <rule context="*:hi[@n] | *:rend[@n]">
                        <report test="@rend ne 'underline'">The @n-attribute is only supported in combination with @rend='underline'</report>
                    </rule>
                </pattern>
            
            
        </schema>
