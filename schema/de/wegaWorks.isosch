<?xml version="1.0" encoding="utf-8"?>
<schema xmlns="http://purl.oclc.org/dsdl/schematron" queryBinding="xslt2">
   <title>ISO Schematron rules</title>
   <!-- This file generated 2019-08-12T12:50:13Z by 'extract-isosch.xsl'. -->

   <!-- ********************* -->
   <!-- namespaces, declared: -->
   <!-- ********************* -->
   <ns prefix="mei" uri="http://www.music-encoding.org/ns/mei"/>

   <!-- ********************* -->
   <!-- namespaces, implicit: -->
   <!-- ********************* -->


   <!-- ************ -->
   <!-- constraints: -->
   <!-- ************ -->
   <pattern id="isoschematron-constraint-wegaWorks-att.notationtype-notationsubtype-When_notationsubtype-1">
              <rule context="mei:*[@notationsubtype]">
                <assert test="@notationtype">An element with a notationsubtype attribute must
                  have a notationtype attribute.</assert>
              </rule>
            </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-list-list_type_constraint-2">
          <rule context="mei:list[@type='gloss']">
            <assert test="count(mei:label) = count(mei:li)">In a list of type "gloss" all items
              must be immediately preceded by a label.</assert>
          </rule>
        </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-componentGrp-checkComponentGrp-3">
          <rule context="mei:componentGrp">
            <assert test="every $i in ./child::mei:*[not(local-name()='head')] satisfies $i/local-name() eq ./parent::mei:*/local-name()">Only child elements of the same name as the parent of the componentGrp are
              allowed.</assert>
          </rule>
        </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-att.augmentdots-dots-dots_attribute_requires_dur-4">
              <rule context="mei:*[@dots]">
                <assert test="@dur">An element with a dots attribute must also have a dur
                  attribute.</assert>
              </rule>
            </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-att.datapointing-data-check_dataTarget-5">
              <rule context="@data">
                <assert role="warning" test="not(normalize-space(.) eq '')">@data attribute
                  should have content.</assert>
                <assert role="warning"
                 test="every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:*[ancestor::mei:music]/@xml:id">The value in @data should correspond to the @xml:id attribute of a descendant of
                  the music element.</assert>
              </rule>
            </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-att.declaring-decls-check_declsTarget-6">
              <rule context="@decls">
                <assert role="warning" test="not(normalize-space(.) eq '')">@decls attribute
                  should have content.</assert>
                <assert role="warning"
                 test="every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:*[ancestor::mei:meiHead]/@xml:id">Each value in @decls should correspond to the @xml:id attribute of an element
                  within the metadata header.</assert>
              </rule>
            </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-att.duration.additive-dur-ignore_dots_attribute-7">
              <rule context="mei:*[contains(@dur, '.')]">
                <assert test="not(@dots)">An element with a dur attribute that contains dotted
                  values must not have a dots attribute.</assert>
              </rule>
            </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-att.handident-hand-check_handTarget-8">
              <rule context="@hand">
                <assert role="warning" test="not(normalize-space(.) eq '')">@hand attribute
                  should have content.</assert>
                <assert role="warning"
                 test="every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:hand/@xml:id">Each value in @hand should correspond to the @xml:id attribute of a hand
                  element.</assert>
              </rule>
            </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-att.instrumentident-instr-check_instrTarget-9">
              <rule context="@instr">
                <assert role="warning" test="not(normalize-space(.) eq '')">@instr attribute
                  should have content.</assert>
                <assert role="warning"
                 test="every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:instrDef/@xml:id">The value in @instr should correspond to the @xml:id attribute of an instrDef
                  element.</assert>
              </rule>
            </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-att.joined-join-check_joinTarget-10">
              <rule context="@join">
                <assert role="warning" test="not(normalize-space(.) eq '')">@join attribute
                  should have content.</assert>
                <assert role="warning"
                 test="every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:*/@xml:id">Each value in @join should correspond to the @xml:id attribute of an
                  element.</assert>
              </rule>
            </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-att.name-nymref-check_nymrefTarget-11">
              <rule context="@nymref">
                <assert role="warning" test="not(normalize-space(.) eq '')">@nymref attribute
                  should have content.</assert>
                <assert role="warning"
                 test="every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:*/@xml:id">The value in @nymref should correspond to the @xml:id attribute of an
                  element.</assert>
              </rule>
            </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-att.plist-plist-check_plistTarget-12">
              <rule context="@plist">
                <assert role="warning" test="not(normalize-space(.) eq '')">@plist attribute
                  should have content.</assert>
                <assert role="warning"
                 test="every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:*/@xml:id">Each value in @plist should correspond to the @xml:id attribute of an
                  element.</assert>
              </rule>
            </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-att.responsibility-resp-check_respTarget-13">
              <rule context="@resp">
                <assert role="warning" test="not(normalize-space(.) eq '')">@resp attribute
                  should have content.</assert>
                <assert role="warning"
                 test="every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:*[ancestor::mei:meiHead]/@xml:id">The value in @resp should correspond to the @xml:id attribute of an element
                  within the metadata header.</assert>
              </rule>
            </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-att.startendid-endid-check_endidTarget-14">
              <rule context="@endid">
                <assert role="warning" test="not(normalize-space(.) eq '')">@endid attribute
                  should have content.</assert>
                <assert role="warning"
                 test="every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:*/@xml:id">The value in @endid should correspond to the @xml:id attribute of an
                  element.</assert>
              </rule>
            </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-att.startid-startid-check_startidTarget-15">
              <rule context="@startid">
                <assert role="warning" test="not(normalize-space(.) eq '')">@startid attribute
                  should have content.</assert>
                <assert role="warning"
                 test="every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:*/@xml:id">The value in @startid should correspond to the @xml:id attribute of an
                  element.</assert>
              </rule>
            </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-att.typed-subtype-When_subtype-16">
              <rule context="mei:*[@subtype]">
                <assert test="@type">An element with a subtype attribute must have a type
                  attribute.</assert>
              </rule>
            </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-annot-annot_content_constraint-17">
          <rule context="mei:annot[mei:head or mei:lg or mei:p or mei:quote or mei:table]">
            <assert test="not(mei:head[preceding-sibling::*[not(local-name()='head')]])">Head
              elements can only occur at the start of annot.</assert>
            <assert test="not(*[../text()[normalize-space()]])">Mixed content is not allowed
              when head, lg, p, quote, or table is used.</assert>
            <assert test="not(*[not(local-name() eq 'biblList' or local-name() eq 'castList' or local-name() eq 'head' or                local-name() eq 'lg' or local-name() eq 'list' or local-name() eq 'p' or local-name() eq 'quote' or                local-name() eq 'table')])">Unstructured text not allowed when head, lg, p, quote, or table elements are
              used.</assert>
          </rule>
        </pattern>
   <pattern id="schematron-constraint-wegaWorks-creation-check_creationDateHasText-18">
      <rule context="mei:creation">
                <assert test="mei:date/text()">The creation date should have human readable text as content.</assert>
            </rule>
   </pattern>
   <pattern id="schematron-constraint-wegaWorks-date-dateHeuristics1-19">
      <rule context="mei:date">
                <report test="(@notbefore gt @notafter) and not(starts-with(@notbefore, '-'))">value of notBefore greater than notAfter</report>
            </rule>
   </pattern>
   <pattern id="schematron-constraint-wegaWorks-date-dateHeuristics3-20">
      <rule context="mei:date">
                <report test="(@startdate or @enddate) and (@isodate or @notafter or @notbefore)">cooccurence of date and duration attributes</report>
            </rule>
   </pattern>
   <pattern id="schematron-constraint-wegaWorks-date-dateHeuristics4-21">
      <rule context="mei:date">
                <report test="@isodate and (@notafter or @notbefore)">cooccurence of exact and uncertain date attributes</report>
            </rule>
   </pattern>
   <pattern id="schematron-constraint-wegaWorks-date-dateHeuristics5-22">
      <rule context="mei:date">
                <assert test="@isodate or @notbefore or @notafter or @startdate or @enddate or @cert='unknown' or matches(., '0000|o\.J\.|unknown')">mei:date benötigt ein Attribut @isodate, @notbefore o.ä.</assert>
            </rule>
   </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-mei-Check_staff-23">
          <rule context="mei:*[@staff]">
            <assert test="every $i in tokenize(@staff, '\s+') satisfies $i=//mei:staffDef/@n">The values in @staff must correspond to @n attribute of a staffDef
              element.</assert>
          </rule>
        </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-section-Check_sectionexpansion-24">
          <rule context="mei:section[mei:expansion]">
            <assert test="descendant::mei:section|descendant::mei:ending|descendant::mei:rdg">A
              section containing an expansion element must have descendant section, ending, or rdg
              elements.</assert>
          </rule>
        </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-staffDef-Check_staffDefn-25">
          <rule context="mei:staffDef">
            <let name="thisstaff" value="@n"/>
            <assert test="@n">A staffDef must have an n attribute.</assert>
            <assert test="@lines or preceding::mei:staffDef[@n=$thisstaff and @lines]">The first
              occurrence of a staff must declare the number of staff lines.</assert>
            <assert test="count(mei:clef) + count(mei:clefGrp) &lt; 2">Only one clef or clefGrp
              is permitted.</assert>
          </rule>
        </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-staffDef-Check_ancestor_staff-26">
          <rule context="mei:staffDef[ancestor::mei:staff]">
            <let name="thisstaff" value="@n"/>
            <assert test="ancestor::mei:staff/@n eq $thisstaff">If a staffDef appears in a
              staff, it must bear the same @n as this staff.</assert>
          </rule>
        </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-staffDef-Check_clef_position_staffDef-27">
          <rule context="mei:staffDef[@clef.line and @lines]">
            <assert test="number(@clef.line) &lt;= number(@lines)">The clef position must be
              less than or equal to the number of lines on the staff.</assert>
          </rule>
        </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-staffDef-Check_clef_position_staffDef_nolines-28">
          <rule context="mei:staffDef[@clef.line and not(@lines)]">
            <let name="thisstaff" value="@n"/>
            <let name="stafflines"
              value="preceding::mei:staffDef[@n=$thisstaff and @lines][1]/@lines"/>
            <assert test="number(@clef.line) &lt;= number($stafflines)">The clef position must
              be less than or equal to the number of lines on the staff.</assert>
          </rule>
        </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-staffDef-Check_tab_strings_lines-29">
          <rule context="mei:staffDef[@tab.strings and @lines]">
            <let name="countTokens"
              value="count(tokenize(normalize-space(@tab.strings), '\s'))"/>
            <assert test="$countTokens = 1 or $countTokens = @lines">The tab.strings attribute
              must have the same number of values as there are staff lines.</assert>
          </rule>
        </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-staffDef-Check_tab_strings_nolines-30">
          <rule context="mei:staffDef[@tab.strings and not(@lines)]">
            <let name="countTokens"
              value="count(tokenize(normalize-space(@tab.strings), '\s'))"/>
            <let name="thisStaff" value="@n"/>
            <assert test="$countTokens = 1 or $countTokens = preceding::mei:staffDef[@n=$thisStaff and @lines][1]/@lines">The tab.strings attribute must have the same number of values as there are staff
              lines.</assert>
          </rule>
        </pattern>
          <pattern>
            <rule context="mei:staffDef[@lines.color and @lines]">
              <let name="countTokens"
              value="count(tokenize(normalize-space(@lines.color), '\s'))"/>
              <assert test="$countTokens = 1 or $countTokens = @lines">The lines.color attribute
                must have either 1) a single value or 2) the same number of values as there are
                staff lines.</assert>
            </rule>
            <rule context="mei:staffDef[@lines.color and not(@lines)]">
              <let name="countTokens"
              value="count(tokenize(normalize-space(@lines.color), '\s'))"/>
              <let name="thisStaff" value="@n"/>
              <assert test="$countTokens = 1 or $countTokens = preceding::mei:staffDef[@n=$thisStaff and @lines][1]/@lines">The lines.color attribute must have either 1) a single value or 2) the same number
                of values as there are staff lines.</assert>
            </rule>
          </pattern>
        
          <pattern>
            <rule context="mei:staffDef[@ppq][ancestor::mei:scoreDef[@ppq]]">
              <let name="staffPPQ" value="@ppq"/>
              <let name="scorePPQ" value="ancestor::mei:scoreDef[@ppq][1]/@ppq"/>
              <assert test="($scorePPQ mod $staffPPQ) = 0">The value of ppq must be a factor of
                the value of ppq on an ancestor scoreDef.</assert>
            </rule>
          </pattern>
        
          <pattern>
            <rule context="mei:staffDef[@ppq][preceding::mei:scoreDef[@ppq]]">
              <let name="staffPPQ" value="@ppq"/>
              <let name="scorePPQ" value="preceding::mei:scoreDef[@ppq][1]/@ppq"/>
              <assert test="($scorePPQ mod $staffPPQ) = 0">The value of ppq must be a factor of
                the value of ppq on a preceding scoreDef.</assert>
            </rule>
          </pattern>
        <pattern id="isoschematron-constraint-wegaWorks-staffGrp-Check_staffGrp_unique_staff_n_values-34">
          <rule context="mei:staffGrp">
            <let name="countstaves" value="count(descendant::mei:staffDef)"/>
            <let name="countuniqstaves"
              value="count(distinct-values(descendant::mei:staffDef/@n))"/>
            <assert test="$countstaves eq $countuniqstaves">Each staffDef must have a unique
              value for the n attribute.</assert>
          </rule>
        </pattern>
   <pattern id="schematron-constraint-wegaWorks-title-work-subtitles-map-xmllang-35">
                <rule context="mei:title[@type='sub'][parent::mei:titleStmt]">
                    <assert test="string(@xml:lang) = preceding-sibling::mei:title/string(@xml:lang)">Make sure that this subtitle has a proper xml:lang attribute matching a preceding title's xml:lang</assert>
                </rule>
            </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-change-change_requirements-36">
          <rule context="mei:change">
            <assert test="@isodate or mei:date">The date of the change must be recorded in an
              isodate attribute or date element.</assert>
            <assert test="@resp or mei:respStmt">The person responsible for the change must be
              recorded in a resp attribute or respStmt element.</assert>
          </rule>
        </pattern>
   <pattern id="schematron-constraint-wegaWorks-source-id-check-37">
                <rule context="mei:source">
                    <assert test="@xml:id or ancestor::mei:source">
                        Am Wurzelelement muss eine XML-ID angegeben sein.
                    </assert>
                </rule>
            </pattern>
   <pattern id="schematron-constraint-wegaWorks-titleStmt-multiple-same-language-titles-38">
                <rule context="mei:titleStmt[not(@analog)]">
                    <report test="some $title in mei:title[not(@type)] satisfies ($title/string(@xml:lang) = $title/following-sibling::mei:title[not(@type)]/string(@xml:lang))">Multiple title with the same xml:lang detected</report>
                </rule>
            </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-beam-When_not_copyof_beam_content-39">
          <rule context="mei:beam[not(@copyof)]">
            <assert test="count(descendant::*[local-name()='note' or local-name()='rest' or               local-name()='chord' or local-name()='space']) &gt; 1">A beam without a copyof attribute must have at least 2 note, rest, chord, or space
              descendants.</assert>
          </rule>
        </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-beamSpan-beamspan_start-_and_end-type_attributes_required-40">
          <rule context="mei:beamSpan">
            <assert test="@startid or @tstamp or @tstamp.ges or @tstamp.real">Must have one of
              the attributes: startid, tstamp, tstamp.ges or tstamp.real.</assert>
            <assert test="@dur or @dur.ges or @endid or @tstamp2">Must have one of the
              attributes: dur, dur.ges, endid, or tstamp2.</assert>
          </rule>
        </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-bend-bend_start-_and_end-type_attributes_required-41">
          <rule context="mei:bend">
            <assert test="@startid or @tstamp or @tstamp.ges or @tstamp.real">Must have one of
              the attributes: startid, tstamp, tstamp.ges or tstamp.real.</assert>
            <assert test="@dur or @dur.ges or @endid or @tstamp2">Must have one of the
              attributes: dur, dur.ges, endid, or tstamp2.</assert>
          </rule>
        </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-breath-breath_start-type_attributes_required-42">
          <rule context="mei:breath">
            <assert test="@startid or @tstamp or @tstamp.ges or @tstamp.real">Must have one of
              the attributes: startid, tstamp, tstamp.ges or tstamp.real.</assert>
          </rule>
        </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-fermata-fermata_start-type_attributes_required-43">
          <rule context="mei:fermata">
            <assert test="@startid or @tstamp or @tstamp.ges or @tstamp.real">Must have one of
              the attributes: startid, tstamp, tstamp.ges or tstamp.real.</assert>
          </rule>
        </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-gliss-gliss_start-_and_end-type_attributes_required-44">
          <rule context="mei:gliss">
            <assert test="@startid or @tstamp or @tstamp.ges or @tstamp.real">Must have one of
              the attributes: startid, tstamp, tstamp.ges or tstamp.real.</assert>
            <assert test="@dur or @dur.ges or @endid or @tstamp2">Must have one of the
              attributes: dur, dur.ges, endid, or tstamp2.</assert>
          </rule>
        </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-hairpin-hairpin_start-_and_end-type_attributes_required-45">
          <rule context="mei:hairpin">
            <assert test="@startid or @tstamp or @tstamp.ges or @tstamp.real">Must have one of
              the attributes: startid, tstamp, tstamp.ges or tstamp.real.</assert>
            <assert test="@dur or @dur.ges or @endid or @tstamp2">Must have one of the
              attributes: dur, dur.ges, endid, or tstamp2.</assert>
          </rule>
        </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-harpPedal-harpPedal_start-type_attributes_required-46">
          <rule context="mei:harpPedal">
            <assert test="@startid or @tstamp or @tstamp.ges or @tstamp.real">Must have one of
              the attributes: startid, tstamp, tstamp.ges or tstamp.real.</assert>
          </rule>
        </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-octave-octave_start-_and_end-type_attributes_required-47">
          <rule context="mei:octave">
            <assert test="@startid or @tstamp or @tstamp.ges or @tstamp.real">Must have one of
              the attributes: startid, tstamp, tstamp.ges or tstamp.real.</assert>
            <assert test="@dur or @dur.ges or @endid or @tstamp2">Must have one of the
              attributes: dur, dur.ges, endid, or tstamp2.</assert>
          </rule>
        </pattern>
          <pattern>
            <rule context="mei:measure/mei:ossia">
              <assert test="count(mei:*) = count(mei:staff)">In a measure, ossia may only
                contain staff elements.</assert>
            </rule>
            <rule context="mei:staff/mei:ossia">
              <assert test="count(mei:*) = count(mei:layer)">In a staff, ossia may only contain
                layer elements.</assert>
            </rule>
          </pattern>
        <pattern id="isoschematron-constraint-wegaWorks-pedal-pedal_start-type_attributes_required-49">
          <rule context="mei:pedal">
            <assert test="@startid or @tstamp or @tstamp.ges or @tstamp.real">Must have one of
              the attributes: startid, tstamp, tstamp.ges or tstamp.real.</assert>
          </rule>
        </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-slur-slur_start-_and_end-type_attributes_required-50">
          <rule context="mei:slur">
            <assert test="@startid or @tstamp or @tstamp.ges or @tstamp.real">Must have one of
              the attributes: startid, tstamp, tstamp.ges or tstamp.real.</assert>
            <assert test="@dur or @dur.ges or @endid or @tstamp2">Must have one of the
              attributes: dur, dur.ges, endid, or tstamp2.</assert>
          </rule>
        </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-slur-slur_containing_curve-51">
          <rule context="mei:slur[mei:curve[@bezier or @bulge or @curvedir or @lform or @lwidth or              @ho or @startho or @endho or @to or @startto or @endto or @vo or @startvo or @endvo or              @x or @y or @x2 or @y2]]">
            <assert test="not(@bezier or @bulge or @curvedir or @lform or @lwidth or @ho or @startho or                @endho or @to or @startto or @endto or @vo or @startvo or @endvo or @x or @y or @x2 or @y2)"
                 role="warning">The visual attributes of the slur (@bezier, @bulge, @curvedir, @lform,
              @lwidth, @ho, @startho, @endho, @to, @startto, @endto, @vo, @startvo, @endvo, @x, @y,
              @x2, and @y2) will be overridden by visual attributes of the contained curve
              elements.</assert>
          </rule>
        </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-tie-tie_start-_and_end-type_attributes_required-52">
          <rule context="mei:tie">
            <assert test="@startid or @tstamp or @tstamp.ges or @tstamp.real">Must have one of
              the attributes: startid, tstamp, tstamp.ges or tstamp.real.</assert>
            <assert test="@dur or @dur.ges or @endid or @tstamp2">Must have one of the
              attributes: dur, dur.ges, endid, or tstamp2.</assert>
          </rule>
        </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-tie-tie_containing_curve-53">
          <rule context="mei:tie[mei:curve[@bezier or @bulge or @curvedir or @lform or @lwidth or              @ho or @startho or @endho or @to or @startto or @endto or @vo or @startvo or              @endvo or @x or @y or @x2 or @y2]]">
            <assert test="not(@bezier or @bulge or @curvedir or @lform or @lwidth or @ho or @startho or                @endho or @to or @startto or @endto or @vo or @startvo or @endvo or @x or @y or @x2 or @y2)"
                 role="warning">The visual attributes of the tie (@bezier, @bulge, @curvedir, @lform,
              @lwidth, @ho, @startho, @endho, @to, @startto, @endto, @vo, @startvo, @endvo, @x, @y,
              @x2, and @y2) will be overridden by visual attributes of the contained curve
              elements.</assert>
          </rule>
        </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-tuplet-When_not_copyof_tuplet_content-54">
          <rule context="mei:tuplet[not(@copyof)]">
            <assert test="count(descendant::*[local-name()='note' or local-name()='rest' or               local-name()='chord']) &gt; 1">A tuplet without a copyof attribute must have at least 2 note, rest, or chord
              descendants.</assert>
          </rule>
        </pattern>
   <pattern id="isoschematron-constraint-wegaWorks-tupletSpan-tupletSpan_start-_and_end-type_attributes_required-55">
          <rule context="mei:tupletSpan">
            <assert test="@startid or @tstamp or @tstamp.ges or @tstamp.real">Must have one of
              the attributes: startid, tstamp, tstamp.ges or tstamp.real.</assert>
            <assert test="@dur or @dur.ges or @endid or @tstamp2">Must have one of the
              attributes: dur, dur.ges, endid, or tstamp2.</assert>
          </rule>
        </pattern>
   <pattern id="schematron-constraint-wegaWorks-styleguide-document-node-content-56">
                <rule context="document-node()">
                    <report test="count(processing-instruction()) ne 2">WeGA styleguide error: there should exactly be two processing instructions before the root element</report>
                    <report test="comment()">WeGA styleguide error: there should be no comments outside the root element</report>
                </rule>
            </pattern>
   <pattern id="schematron-constraint-wegaWorks-att.wega.rend-underline-n-57">
                    <rule context="*:hi[@n] | *:rend[@n]">
                        <report test="@rend ne 'underline'">The @n-attribute is only supported in combination with @rend='underline'</report>
                    </rule>
                </pattern>
            
            
        </schema>
