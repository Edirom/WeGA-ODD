<?xml version="1.0" encoding="UTF-8"?>
<schema xmlns="http://purl.oclc.org/dsdl/schematron" queryBinding="xslt2">
   <title>ISO Schematron rules</title>
   <!-- This file generated 2025-03-06T08:18:56Z by 'extract-isosch.xsl'. -->
   <!-- ********************* -->
   <!-- namespaces, implicit: -->
   <!-- ********************* -->
   <ns prefix="mei" uri="http://www.music-encoding.org/ns/mei"/>
   <!-- ******************************************************* -->
   <!-- constraints in en, und, mul, zxx, of which there are 51 -->
   <!-- ******************************************************* -->
   <pattern id="schematron-constraint-between_requires_adjacent_staves-1">
      <rule context="mei:*[@place eq 'between']">
         <assert test="count(tokenize(normalize-space(string(@staff)), '\s+')) = 2">The @staff attribute must contain 2 numerically-adjacent integer values.</assert>
         <let name="tokenizedStaff"
              value="tokenize(normalize-space(string(@staff)), '\s+')"/>
         <let name="maxValue"
              value="max((number($tokenizedStaff[1]), number($tokenizedStaff[2])))"/>
         <let name="minValue"
              value="min((number($tokenizedStaff[1]), number($tokenizedStaff[2])))"/>
         <assert test="$maxValue - $minValue = 1">Staves <value-of select="$minValue"/> and <value-of select="$maxValue"/> are not adjacent.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-When_notationsubtype-2">
      <rule context="mei:*[@notationsubtype]">
         <assert test="@notationtype">An element with a notationsubtype attribute must have a notationtype attribute.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-id-check-3">
      <rule context="mei:manifestation">
         <assert test="@xml:id or ancestor::mei:manifestation"> Am Wurzelelement muss eine XML-ID angegeben sein.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-check_singleton-4">
      <rule context="mei:manifestation[@singleton eq 'true']">
         <assert test="not(mei:itemList)">Item children are not permitted when @singleton equals "true".</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-check_singleton_availability-5">
      <rule context="mei:manifestation[@singleton eq 'false'] | mei:manifestation[not(@singleton)]">
         <assert test="not(mei:availability)">Availability is only permitted when @singleton equals "true".</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-types-match-external-identifiers-6">
      <rule context="mei:altId[@type='gnd']">
         <assert test="matches(., '^1[01]?\d{7}[0-9X]|[47]\d{6}-\d|[1-9]\d{0,7}-[0-9X]|3\d{7}[0-9X]$')">That doesn't look like a valid GND ID.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-types-match-external-identifiers-7">
      <rule context="mei:altId[@type='wikidata']">
         <assert test="matches(., '^Q[1-9]\d*$')">That doesn't look like a valid Wikidata ID.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-types-match-external-identifiers-8">
      <rule context="mei:altId[@type='dracor.einakter']">
         <assert test="matches(., '^ein[0-9]{6}$')">That doesn't look like a valid DraCor Einakter ID.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-check_change-9">
      <rule context="mei:change">
         <assert test="@isodate or mei:date">The date of the change must be recorded in an isodate attribute or date element.</assert>
         <assert test="@resp or mei:respStmt[mei:name or mei:corpName or mei:persName]"
                 role="warning">It is recommended that the agent responsible for the change be recorded in a resp attribute or in a name, corpName, or persName element in the respStmt element.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-enforce-sources-meta-cat-10">
      <rule context="mei:classification[parent::mei:manifestation]">
         <assert test="count(mei:termList[@label='sources-meta-cat']) eq 1">There needs to be exactly one termlist child element with label-attribute "sources-meta-cat".</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-checkComponentList-11">
      <rule context="mei:componentList">
         <assert test="every $i in ./child::mei:*[not(local-name()='head')] satisfies             $i/local-name() eq ./parent::mei:*/local-name()">Only child elements of the same name as the parent of the componentList are allowed.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-checkComponents-12">
      <rule context="mei:componentList[mei:*[@comptype]]">
         <assert role="warning"
                 test="count(mei:*[@comptype]) = count(mei:*[local-name() ne 'head'])">When any child element has a comptype attribute, it is recommended that comptype appear on all child elements.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-checkHandListLabels-13">
      <rule context="mei:handList[mei:label]">
         <assert role="warning" test="count(mei:label) = count(mei:hand)">When labels are used, usually each hand has one.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-history_restriction-14">
      <rule context="mei:history[parent::mei:work or parent::mei:expression or parent::mei:manifestation[not(@singleton='true')]]">
         <assert test="not(mei:acquisition or mei:provenance or mei:exhibHist or mei:treatHist or mei:treatSched)">The elements acquisition, provenance, exhibHist, treatHist and treatSched are not permitted at the work or expression level and are only permitted at the manifestation level, if the manifestation is a manifestation singleton.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-check_meiHead_type-15">
      <rule context="mei:meiHead[@type eq 'music']">
         <assert test="ancestor::mei:mei">The meiHead type attribute can have the value 'music' only when the document element is "mei".</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-check_meiHead_type-16">
      <rule context="mei:meiHead[@type eq 'corpus']">
         <assert test="ancestor::mei:meiCorpus">The meiHead type attribute can have the value 'corpus' only when the document element is "meiCorpus".</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-check_meiHead_type-17">
      <rule context="mei:meiHead[@type eq 'independent']">
         <assert test="not(ancestor::mei:*)">The meiHead type attribute can have the value 'independent' only when the document element is "meiHead".</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-sources-meta-cat-18">
      <rule context="mei:termList[@label='sources-meta-cat']">
         <assert test="every $term in mei:term satisfies $term = ('Druck', 'Handschrift', 'Musik', 'Text')">Only 'Druck', 'Handschrift', 'Musik', or 'Text' are valid WeGA source meta categories</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-checkTermListLabels-19">
      <rule context="mei:termList[mei:label]">
         <assert role="warning" test="count(mei:label) = count(mei:term)">When labels are used, usually each term has one.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-multiple-same-language-titles-20">
      <rule context="mei:titleStmt[not(@analog)]">
         <report test="some $title in mei:title[not(@type)] satisfies ($title/string(@xml:lang) = $title/following-sibling::mei:title[not(@type)]/string(@xml:lang))">Multiple title with the same xml:lang detected</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-clef_shape_requires_clef_line-21">
      <rule context="mei:*[matches(@clef.shape, '[FCG]')]">
         <assert test="@clef.line">An 'F', 'C', or 'G' clef requires that its position be specified.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-clef_shape_requires_clef_line-22">
      <rule context="mei:*[matches(@clef.shape, '(TAB|perc)')]">
         <assert test="@lines">A TAB or percussion clef requires that the number of lines be specified.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-annot-in-works-23">
      <rule context="mei:annot">
         <report test="@type and not(parent::mei:notesStmt/parent::mei:manifestation)">No @type attribute needed here. This is only intended for notes statements within manifestations.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-Check_annot_data-24">
      <rule context="mei:annot[@data]">
         <assert test="ancestor::mei:notesStmt">The @data attribute may only occur on an annotation within the notesStmt element.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-check_creationDateHasText-25">
      <rule context="mei:creation">
         <assert test="mei:date/text()">The creation date should have human readable text as content.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-dateHeuristics1-26">
      <rule context="mei:date">
         <report test="(@notbefore gt @notafter) and not(starts-with(@notbefore, '-'))">value of notBefore greater than notAfter</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-dateHeuristics3-27">
      <rule context="mei:date">
         <report test="(@startdate or @enddate) and (@isodate or @notafter or @notbefore)">cooccurence of date and duration attributes</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-dateHeuristics4-28">
      <rule context="mei:date">
         <report test="@isodate and (@notafter or @notbefore)">cooccurence of exact and uncertain date attributes</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-dateHeuristics5-29">
      <rule context="mei:date">
         <assert test="@isodate or @notbefore or @notafter or @startdate or @enddate or @cert='unknown' or matches(., '0000|o\.J\.|unknown')">mei:date benötigt ein Attribut @isodate, @notbefore o.ä.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-check_dimensions-30">
      <rule context="mei:physDesc/mei:dimensions">
         <assert test="not(count(mei:depth) &gt; 1)">The depth element may only appear once.</assert>
         <assert test="not(count(mei:height) &gt; 1)">The height element may only appear once.</assert>
         <assert test="not(count(mei:width) &gt; 1)">The width element may only appear once.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-manifest-parent-31">
      <rule context="mei:identifier[parent::mei:manifestation]">
         <assert test="@type=('WeGA','JV')">direct child identifiers of manifestation elements must have a type attribute with either the value "WeGA" or "JV".</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-wega-works-identifier-32">
      <rule context="mei:identifier[@type='WeGA']">
         <assert test="matches(., 'A02\d{4}')">WeGA-Identifiers must match the wega.works.pointer datatype</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-Check_staff-33">
      <rule context="mei:*[@staff]">
         <assert test="every $i in tokenize(normalize-space(@staff), '\s+') satisfies $i=//mei:staffDef/@n">The values in @staff must correspond to @n attribute of a staffDef element.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-FRBR_relation-34">
      <rule context="mei:relationList/mei:relation[parent::mei:work or parent::mei:expression or           parent::mei:source or parent::mei:item]">
         <assert test="matches(@rel, 'hasAbridgement') or             matches(@rel, 'hasAbridgement') or             matches(@rel, 'isAbridgementOf') or             matches(@rel, 'hasAdaptation') or             matches(@rel, 'isAdaptationOf') or             matches(@rel, 'hasAlternate') or             matches(@rel, 'isAlternateOf') or             matches(@rel, 'hasArrangement') or             matches(@rel, 'isArrangementOf') or             matches(@rel, 'hasComplement') or             matches(@rel, 'isComplementOf') or             matches(@rel, 'hasEmbodiment') or             matches(@rel, 'isEmbodimentOf') or             matches(@rel, 'hasExemplar') or             matches(@rel, 'isExemplarOf') or             matches(@rel, 'hasImitation') or             matches(@rel, 'isImitationOf') or             matches(@rel, 'hasPart') or             matches(@rel, 'isPartOf') or             matches(@rel, 'hasRealization') or             matches(@rel, 'isRealizationOf') or             matches(@rel, 'hasReconfiguration') or             matches(@rel, 'isReconfigurationOf') or             matches(@rel, 'hasReproduction') or             matches(@rel, 'isReproductionOf') or             matches(@rel, 'hasRevision') or             matches(@rel, 'isRevisionOf') or             matches(@rel, 'hasSuccessor') or             matches(@rel, 'isSuccessorOf') or             matches(@rel, 'hasSummarization') or             matches(@rel, 'isSummarizationOf') or             matches(@rel, 'hasSupplement') or             matches(@rel, 'isSupplementOf') or             matches(@rel, 'hasTransformation') or             matches(@rel, 'isTransformationOf') or             matches(@rel, 'hasTranslation') or             matches(@rel, 'isTranslationOf')">Within work, expression, source, or item, the value of the rel attribute must match one of the following: hasAbridgement, isAbridgementOf, hasAdaptation, isAdaptationOf, hasAlternate, isAlternateOf, hasArrangement, isArrangementOf, hasComplement, isComplementOf, hasEmbodiment, isEmbodimentOf, hasExemplar, isExemplarOf, hasImitation, isImitationOf, hasPart, isPartOf, hasRealization, isRealizationOf, hasReconfiguration, isReconfigurationOf, hasReproduction, isReproductionOf, hasRevision, isRevisionOf, hasSuccessor, isSuccessorOf, hasSummarization, isSummarizationOf, hasSupplement, isSupplementOf, hasTransformation, isTransformationOf, hasTranslation, isTranslationOf</assert>
         <assert test="@target">Within work, expression, source or item, the target attribute must be present.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-Check_sectionexpansion-35">
      <rule context="mei:section[mei:expansion]">
         <assert test="descendant::mei:section|descendant::mei:ending|descendant::mei:rdg">A section containing an expansion element must have descendant section, ending, or rdg elements.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-Check_staffDefn-36">
      <rule context="mei:staffDef[not(ancestor::mei:staff)]">
         <let name="thisstaff" value="@n"/>
         <assert test="@n">StaffDef must have an n attribute.</assert>
         <assert test="@lines or preceding::mei:staffDef[@n=$thisstaff and @lines]"> Either @lines must be present or a preceding staffDef with the same value for @n and @lines must exist.</assert>
         <assert test="count(mei:clef) + count(mei:clefGrp) &lt; 2">Only one clef or clefGrp is permitted.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-Check_ancestor_staff-37">
      <rule context="mei:staffDef[ancestor::mei:staff and @n]">
         <let name="thisstaff" value="@n"/>
         <assert test="ancestor::mei:staff/@n eq $thisstaff">@n must have the same value as the current staff.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-Check_ancestor_staff_lines-38">
      <rule context="mei:staffDef[ancestor::mei:staff and not(@n)]">
         <let name="thisstaff" value="ancestor::mei:staff/@n"/>
         <assert test="@lines or preceding::mei:staffDef[@n=$thisstaff and @lines]"> Either @lines must be present or a preceding staffDef with matching @n value and @lines must exist.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-Check_clef_position_staffDef-39">
      <rule context="mei:staffDef[@clef.line and @lines]">
         <assert test="number(@clef.line) &lt;= number(@lines)">The clef position must be less than or equal to the number of lines on the staff.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-Check_clef_position_staffDef_nolines-40">
      <rule context="mei:staffDef[@clef.line and not(@lines)]">
         <let name="thisstaff" value="@n"/>
         <let name="stafflines"
              value="preceding::mei:staffDef[@n=$thisstaff and @lines][1]/@lines"/>
         <assert test="number(@clef.line) &lt;= number($stafflines)">The clef position must be less than or equal to the number of lines on the staff.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-Check_tab_strings_lines-41">
      <rule context="mei:staffDef[@tab.strings and @lines]">
         <let name="countTokens"
              value="count(tokenize(normalize-space(@tab.strings), '\s'))"/>
         <assert test="$countTokens = @lines">The tab.strings attribute must have the same number of values as there are staff lines.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-Check_tab_strings_nolines-42">
      <rule context="mei:staffDef[@tab.strings and not(@lines)]">
         <let name="countTokens"
              value="count(tokenize(normalize-space(@tab.strings), '\s'))"/>
         <let name="thisstaff" value="@n"/>
         <assert test="$countTokens = preceding::mei:staffDef[@n=$thisstaff and @lines][1]/@lines">The tab.strings attribute must have the same number of values as there are staff lines.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-Check_lines_color-1">
      <rule context="mei:staffDef[@lines.color and @lines]">
         <let name="countTokens"
              value="count(tokenize(normalize-space(@lines.color), '\s'))"/>
         <assert test="$countTokens = 1 or $countTokens = @lines">The lines.color attribute must have either 1) a single value or 2) the same number of values as there are staff lines.</assert>
      </rule>
      <rule context="mei:staffDef[@lines.color and not(@lines)]">
         <let name="countTokens"
              value="count(tokenize(normalize-space(@lines.color), '\s'))"/>
         <let name="thisstaff" value="@n"/>
         <assert test="$countTokens = 1 or $countTokens = preceding::mei:staffDef[@n=$thisstaff and @lines][1]/@lines">The lines.color attribute must have either 1) a single value or 2) the same number of values as there are staff lines.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-Check_staff_ppq_ancestor-2">
      <rule context="mei:staffDef[@ppq][ancestor::mei:scoreDef[@ppq]]">
         <let name="staffPPQ" value="@ppq"/>
         <let name="scorePPQ" value="ancestor::mei:scoreDef[@ppq][1]/@ppq"/>
         <assert test="($scorePPQ mod $staffPPQ) = 0">The value of ppq must be a factor of the value of ppq on an ancestor scoreDef.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-Check_staff_ppq_preceding-3">
      <rule context="mei:staffDef[@ppq][preceding::mei:scoreDef[@ppq]]">
         <let name="staffPPQ" value="@ppq"/>
         <let name="scorePPQ" value="preceding::mei:scoreDef[@ppq][1]/@ppq"/>
         <assert test="($scorePPQ mod $staffPPQ) = 0">The value of ppq must be a factor of the value of ppq on a preceding scoreDef.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-Check_staffGrp_unique_staff_n_values-47">
      <rule context="mei:staffGrp">
         <let name="countstaves" value="count(descendant::mei:staffDef)"/>
         <let name="countuniqstaves"
              value="count(distinct-values(descendant::mei:staffDef/@n))"/>
         <assert test="$countstaves eq $countuniqstaves">Each staffDef must have a unique value for the n attribute.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-Check_term_dataTarget-48">
      <rule context="mei:term[@data]">
         <assert test="ancestor::mei:classification">The @data attribute may only occur on a term which is a descendant of a classification element.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-work-subtitles-map-xmllang-49">
      <rule context="mei:title[@type='sub'][parent::mei:titleStmt]">
         <assert test="string(@xml:lang) = preceding-sibling::mei:title/string(@xml:lang)">Make sure that this subtitle has a proper xml:lang attribute matching a preceding title's xml:lang</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-type-or-codedval-50">
      <rule context="mei:title[@codedval]">
         <report test="@type">type and codedval attribute found! A title should either refer to an entity by the codedval attribute or be further refined by the type attribute</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-styleguide-document-node-content-51">
      <rule context="document-node()">
         <report test="count(processing-instruction()) ne 2">WeGA styleguide error: there should exactly be two processing instructions before the root element</report>
         <report test="comment()">WeGA styleguide error: there should be no comments outside the root element</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-underline-n-52">
      <rule context="*:hi[@n] | *:rend[@n]">
         <assert test="@rend = ('underline', 'indent')">The @n-attribute is only supported in combination with @rend='underline' and @rend='indent'</assert>
      </rule>
   </pattern>
</schema>
